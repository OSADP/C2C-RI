<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-86-dlDeviceInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.1 [Need to Share Signal System Inventory] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/18 00:44:01-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.1 [Need to Share Signal System Inventory] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Publish Signal Inventory Information (NTRM 3.3.5.11.1.2}.  RECORD this value as: TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter = ${TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Subscribe to Signal Inventory Information (NTRM 3.3.5.11.1.3}.  RECORD this value as: TMDD_N86R940_Subscribe_to_Signal_Inventory_Information_Parameter = ${TMDD_N86R940_Subscribe_to_Signal_Inventory_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N86R14_Restrictions___Error_Report_Supported = ${TMDD_N86R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Restrictions - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.1).  RECORD this information as: TMDD_N86R376_Restrictions___Device_Inventory_Supported = ${TMDD_N86R376_Restrictions___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Device Description is required by the specification. (NRTM 3.3.5.1.2.1.2.2).  RECORD this information as: TMDD_N86R377_Device_Description_Supported = ${TMDD_N86R377_Device_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Device Control Type is required by the specification. (NRTM 3.3.5.1.2.1.2.3).  RECORD this information as: TMDD_N86R378_Device_Control_Type_Supported = ${TMDD_N86R378_Device_Control_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Controller Description is required by the specification. (NRTM 3.3.5.1.2.1.2.4).  RECORD this information as: TMDD_N86R379_Controller_Description_Supported = ${TMDD_N86R379_Controller_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Roadway Network Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.5).  RECORD this information as: TMDD_N86R380_Roadway_Network_Identifier___Device_Inventory_Supported = ${TMDD_N86R380_Roadway_Network_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Node Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.6).  RECORD this information as: TMDD_N86R381_Node_Identifier___Device_Inventory_Supported = ${TMDD_N86R381_Node_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Node Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.7).  RECORD this information as: TMDD_N86R382_Node_Name___Device_Inventory_Supported = ${TMDD_N86R382_Node_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Link Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.8).  RECORD this information as: TMDD_N86R383_Link_Identifier___Device_Inventory_Supported = ${TMDD_N86R383_Link_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Link Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.9).  RECORD this information as: TMDD_N86R384_Link_Name___Device_Inventory_Supported = ${TMDD_N86R384_Link_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Link Direction - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.10).  RECORD this information as: TMDD_N86R385_Link_Direction___Device_Inventory_Supported = ${TMDD_N86R385_Link_Direction___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Linear Reference - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.11).  RECORD this information as: TMDD_N86R386_Linear_Reference___Device_Inventory_Supported = ${TMDD_N86R386_Linear_Reference___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Linear Reference Version is required by the specification. (NRTM 3.3.5.1.2.1.2.12).  RECORD this information as: TMDD_N86R387_Linear_Reference_Version_Supported = ${TMDD_N86R387_Linear_Reference_Version_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Route Designator - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.13).  RECORD this information as: TMDD_N86R388_Route_Designator___Device_Inventory_Supported = ${TMDD_N86R388_Route_Designator___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Device Uniform Resource Locator (URL) (DeviceURL) is required by the specification. (NRTM 3.3.5.1.2.1.2.14).  RECORD this information as: TMDD_N86R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported = ${TMDD_N86R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Device URL Reference Medium is required by the specification. (NRTM 3.3.5.1.2.1.2.15).  RECORD this information as: TMDD_N86R390_Device_URL_Reference_Medium_Supported = ${TMDD_N86R390_Device_URL_Reference_Medium_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Device Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.2.1.2.16).  RECORD this information as: TMDD_N86R391_Device_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N86R391_Device_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether Master Controller is required by the specification. (NRTM 3.3.5.11.1.5.2.1).  RECORD this information as: TMDD_N86R944_Master_Controller_Supported = ${TMDD_N86R944_Master_Controller_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Link Identifiers is required by the specification. (NRTM 3.3.5.11.1.5.2.2).  RECORD this information as: TMDD_N86R945_Link_Identifiers_Supported = ${TMDD_N86R945_Link_Identifiers_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Direction of Traffic is required by the specification. (NRTM 3.3.5.11.1.5.2.3).  RECORD this information as: TMDD_N86R946_Direction_of_Traffic_Supported = ${TMDD_N86R946_Direction_of_Traffic_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Movement Identifier (MovementIdentifier) is required by the specification. (NRTM 3.3.5.11.1.5.2.4).  RECORD this information as: TMDD_N86R947_Movement_Identifier__MovementIdentifier__Supported = ${TMDD_N86R947_Movement_Identifier__MovementIdentifier__Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Vehicle Movement Approach Link is required by the specification. (NRTM 3.3.5.11.1.5.2.5).  RECORD this information as: TMDD_N86R948_Vehicle_Movement_Approach_Link_Supported = ${TMDD_N86R948_Vehicle_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Pedestrian Movement Approach Link is required by the specification. (NRTM 3.3.5.11.1.5.2.6).  RECORD this information as: TMDD_N86R949_Pedestrian_Movement_Approach_Link_Supported = ${TMDD_N86R949_Pedestrian_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Departing Link is required by the specification. (NRTM 3.3.5.11.1.5.2.7).  RECORD this information as: TMDD_N86R950_Departing_Link_Supported = ${TMDD_N86R950_Departing_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 28 CONFIGURE: Determine whether Crossing Point is required by the specification. (NRTM 3.3.5.11.1.5.2.8).  RECORD this information as: TMDD_N86R951_Crossing_Point_Supported = ${TMDD_N86R951_Crossing_Point_Supported}" passfailResult="False"/>
     <testStep functionId="Step 29 CONFIGURE: Determine whether Turning Movement Approach Vector is required by the specification. (NRTM 3.3.5.11.1.5.2.9).  RECORD this information as: TMDD_N86R952_Turning_Movement_Approach_Vector_Supported = ${TMDD_N86R952_Turning_Movement_Approach_Vector_Supported}" passfailResult="False"/>
     <testStep functionId="Step 30 CONFIGURE: Determine whether Turning Movement Type is required by the specification. (NRTM 3.3.5.11.1.5.2.10).  RECORD this information as: TMDD_N86R953_Turning_Movement_Type_Supported = ${TMDD_N86R953_Turning_Movement_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 31 CONFIGURE: Determine whether Turning Movement Lanes is required by the specification. (NRTM 3.3.5.11.1.5.2.11).  RECORD this information as: TMDD_N86R954_Turning_Movement_Lanes_Supported = ${TMDD_N86R954_Turning_Movement_Lanes_Supported}" passfailResult="False"/>
     <testStep functionId="Step 32 CONFIGURE: Determine whether Turning Movement Description is required by the specification. (NRTM 3.3.5.11.1.5.2.12).  RECORD this information as: TMDD_N86R955_Turning_Movement_Description_Supported = ${TMDD_N86R955_Turning_Movement_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 33 CONFIGURE: Determine whether Phase Identifier (PhaseIdentifier) is required by the specification. (NRTM 3.3.5.11.1.5.2.13).  RECORD this information as: TMDD_N86R956_Phase_Identifier__PhaseIdentifier__Supported = ${TMDD_N86R956_Phase_Identifier__PhaseIdentifier__Supported}" passfailResult="False"/>
     <testStep functionId="Step 34 CONFIGURE: Determine whether Coordinated Phase is required by the specification. (NRTM 3.3.5.11.1.5.2.14).  RECORD this information as: TMDD_N86R957_Coordinated_Phase_Supported = ${TMDD_N86R957_Coordinated_Phase_Supported}" passfailResult="False"/>
     <testStep functionId="Step 35 CONFIGURE: Determine whether Concurrent Phases is required by the specification. (NRTM 3.3.5.11.1.5.2.15).  RECORD this information as: TMDD_N86R958_Concurrent_Phases_Supported = ${TMDD_N86R958_Concurrent_Phases_Supported}" passfailResult="False"/>
     <testStep functionId="Step 36 CONFIGURE: Determine whether Active Movements is required by the specification. (NRTM 3.3.5.11.1.5.2.16).  RECORD this information as: TMDD_N86R959_Active_Movements_Supported = ${TMDD_N86R959_Active_Movements_Supported}" passfailResult="False"/>
     <testStep functionId="Step 37 CONFIGURE: Determine whether Overlap Phase is required by the specification. (NRTM 3.3.5.11.1.5.2.17).  RECORD this information as: TMDD_N86R960_Overlap_Phase_Supported = ${TMDD_N86R960_Overlap_Phase_Supported}" passfailResult="False"/>
     <testStep functionId="Step 38 CONFIGURE: Determine whether Overlap Included Phases is required by the specification. (NRTM 3.3.5.11.1.5.2.18).  RECORD this information as: TMDD_N86R961_Overlap_Included_Phases_Supported = ${TMDD_N86R961_Overlap_Included_Phases_Supported}" passfailResult="False"/>
     <testStep functionId="Step 39 CONFIGURE: Determine whether Ring Identifier is required by the specification. (NRTM 3.3.5.11.1.5.2.19).  RECORD this information as: TMDD_N86R962_Ring_Identifier_Supported = ${TMDD_N86R962_Ring_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 40 CONFIGURE: Determine whether Ring-Phase Assignment is required by the specification. (NRTM 3.3.5.11.1.5.2.20).  RECORD this information as: TMDD_N86R963_Ring_Phase_Assignment_Supported = ${TMDD_N86R963_Ring_Phase_Assignment_Supported}" passfailResult="False"/>
     <testStep functionId="Step 41 CONFIGURE: Determine whether Special Function Identifier is required by the specification. (NRTM 3.3.5.11.1.5.2.21).  RECORD this information as: TMDD_N86R964_Special_Function_Identifier_Supported = ${TMDD_N86R964_Special_Function_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 42 CONFIGURE: Determine whether Special Function Description is required by the specification. (NRTM 3.3.5.11.1.5.2.22).  RECORD this information as: TMDD_N86R965_Special_Function_Description_Supported = ${TMDD_N86R965_Special_Function_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 43 CONFIGURE: Determine whether Time Reference is required by the specification. (NRTM 3.3.5.11.1.5.2.23).  RECORD this information as: TMDD_N86R966_Time_Reference_Supported = ${TMDD_N86R966_Time_Reference_Supported}" passfailResult="False"/>
     <testStep functionId="Step 44 CONFIGURE: Determine whether Pattern Sync Reference is required by the specification. (NRTM 3.3.5.11.1.5.2.24).  RECORD this information as: TMDD_N86R967_Pattern_Sync_Reference_Supported = ${TMDD_N86R967_Pattern_Sync_Reference_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03d" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 45 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 46 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 47 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 48 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 49 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 50 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 51 CONFIGURE: Define the subscription message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 52 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 53 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 54 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription RESPONSETIMEREQUIRED= SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" RESPONSETIMEREQUIRED="60000" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 55 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 55.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps.  Note:If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 55.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlIntersectionSignalInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlIntersectionSignalInventoryUpdate" functionId="dlIntersectionSignalInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 55.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 55.1.2.1 VERIFY that a device-inventory-header data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-inventory-header" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.2 VERIFY that an organization-information data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.3 VERIFY that a device-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.4 VERIFY that a device-location data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-location" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.5 VERIFY that a device-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.6 VERIFY that an intersectionSignalInventoryMsg message was received." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="intersectionSignalInventoryMsg" instanceName="tmdd:intersectionSignalInventoryMsg" elementType="message" functionId="Looking for intersectionSignalInventoryMsg"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.7 VERIFY that a device-inventory-header data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-inventory-header" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.8 VERIFY that an intersection-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="intersection-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 55.1.2.9 IF TMDD_N86R376_Restrictions___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R376_Restrictions___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.9.1 VERIFY that a restrictions data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.10 IF TMDD_N86R377_Device_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R377_Device_Description_Supported}">
                              <testStep functionId="Step 55.1.2.10.1 VERIFY that a device-description data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-description" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.11 IF TMDD_N86R378_Device_Control_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R378_Device_Control_Type_Supported}">
                              <testStep functionId="Step 55.1.2.11.1 VERIFY that a device-control-type data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-control-type" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.12 IF TMDD_N86R379_Controller_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R379_Controller_Description_Supported}">
                              <testStep functionId="Step 55.1.2.12.1 VERIFY that a controller-description data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="controller-description" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.13 IF TMDD_N86R380_Roadway_Network_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R380_Roadway_Network_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.13.1 VERIFY that a network-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.14 IF TMDD_N86R381_Node_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R381_Node_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.14.1 VERIFY that a node-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="node-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.15 IF TMDD_N86R382_Node_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R382_Node_Name___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.15.1 VERIFY that a node-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="node-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.16 IF TMDD_N86R383_Link_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R383_Link_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.16.1 VERIFY that a link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.17 IF TMDD_N86R384_Link_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R384_Link_Name___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.17.1 VERIFY that a link-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.18 IF TMDD_N86R385_Link_Direction___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R385_Link_Direction___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.18.1 VERIFY that a link-direction data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-direction" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.19 IF TMDD_N86R386_Linear_Reference___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R386_Linear_Reference___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.19.1 VERIFY that a linear-reference data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="linear-reference" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.20 IF TMDD_N86R387_Linear_Reference_Version_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R387_Linear_Reference_Version_Supported}">
                              <testStep functionId="Step 55.1.2.20.1 VERIFY that a linear-reference-version data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="linear-reference-version" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.21 IF TMDD_N86R388_Route_Designator___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R388_Route_Designator___Device_Inventory_Supported}">
                              <testStep functionId="Step 55.1.2.21.1 VERIFY that a route-designator data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-designator" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.22 IF TMDD_N86R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}">
                              <testStep functionId="Step 55.1.2.22.1 VERIFY that a device-url data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-url" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.23 IF TMDD_N86R390_Device_URL_Reference_Medium_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R390_Device_URL_Reference_Medium_Supported}">
                              <testStep functionId="Step 55.1.2.23.1 VERIFY that an url-reference-medium data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="url-reference-medium" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.24 IF TMDD_N86R391_Device_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R391_Device_Inventory_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 55.1.2.24.1 VERIFY that a last-update-time data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-update-time" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.25 IF TMDD_N86R944_Master_Controller_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R944_Master_Controller_Supported}">
                              <testStep functionId="Step 55.1.2.25.1 VERIFY that a controller-master-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="controller-master-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.26 IF TMDD_N86R945_Link_Identifiers_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R945_Link_Identifiers_Supported}">
                              <testStep functionId="Step 55.1.2.26.1 VERIFY that a link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.27 IF TMDD_N86R946_Direction_of_Traffic_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R946_Direction_of_Traffic_Supported}">
                              <testStep functionId="Step 55.1.2.27.1 VERIFY that a link-direction data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-direction" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.28 IF TMDD_N86R947_Movement_Identifier__MovementIdentifier__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R947_Movement_Identifier__MovementIdentifier__Supported}">
                              <testStep functionId="Step 55.1.2.28.1 VERIFY that a movement-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="movement-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.29 IF TMDD_N86R948_Vehicle_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R948_Vehicle_Movement_Approach_Link_Supported}">
                              <testStep functionId="Step 55.1.2.29.1 VERIFY that an approach-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.30 IF TMDD_N86R949_Pedestrian_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R949_Pedestrian_Movement_Approach_Link_Supported}">
                              <testStep functionId="Step 55.1.2.30.1 VERIFY that an approach-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.31 IF TMDD_N86R950_Departing_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R950_Departing_Link_Supported}">
                              <testStep functionId="Step 55.1.2.31.1 VERIFY that a departing-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="departing-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.32 IF TMDD_N86R951_Crossing_Point_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R951_Crossing_Point_Supported}">
                              <testStep functionId="Step 55.1.2.32.1 VERIFY that a crossing-point data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="crossing-point" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.33 IF TMDD_N86R952_Turning_Movement_Approach_Vector_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R952_Turning_Movement_Approach_Vector_Supported}">
                              <testStep functionId="Step 55.1.2.33.1 VERIFY that an approach-vector data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="approach-vector" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.34 IF TMDD_N86R953_Turning_Movement_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R953_Turning_Movement_Type_Supported}">
                              <testStep functionId="Step 55.1.2.34.1 VERIFY that a turning-movement-code data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="turning-movement-code" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.35 IF TMDD_N86R954_Turning_Movement_Lanes_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R954_Turning_Movement_Lanes_Supported}">
                              <testStep functionId="Step 55.1.2.35.1 VERIFY that a turning-movement-lanes data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="turning-movement-lanes" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.36 IF TMDD_N86R955_Turning_Movement_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R955_Turning_Movement_Description_Supported}">
                              <testStep functionId="Step 55.1.2.36.1 VERIFY that a turning-movement-text data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="turning-movement-text" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.37 IF TMDD_N86R956_Phase_Identifier__PhaseIdentifier__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R956_Phase_Identifier__PhaseIdentifier__Supported}">
                              <testStep functionId="Step 55.1.2.37.1 VERIFY that a phase-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="phase-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.38 IF TMDD_N86R957_Coordinated_Phase_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R957_Coordinated_Phase_Supported}">
                              <testStep functionId="Step 55.1.2.38.1 VERIFY that a coordinated-phase data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="coordinated-phase" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.39 IF TMDD_N86R958_Concurrent_Phases_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R958_Concurrent_Phases_Supported}">
                              <testStep functionId="Step 55.1.2.39.1 VERIFY that a concurrent-phases-list data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="concurrent-phases-list" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.40 IF TMDD_N86R959_Active_Movements_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R959_Active_Movements_Supported}">
                              <testStep functionId="Step 55.1.2.40.1 VERIFY that an active-movements-list data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="active-movements-list" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.41 IF TMDD_N86R960_Overlap_Phase_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R960_Overlap_Phase_Supported}">
                              <testStep functionId="Step 55.1.2.41.1 VERIFY that an overlap-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="overlap-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.42 IF TMDD_N86R961_Overlap_Included_Phases_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R961_Overlap_Included_Phases_Supported}">
                              <testStep functionId="Step 55.1.2.42.1 VERIFY that an overlap-included-phases data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="overlap-included-phases" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.43 IF TMDD_N86R962_Ring_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R962_Ring_Identifier_Supported}">
                              <testStep functionId="Step 55.1.2.43.1 VERIFY that a ring-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="ring-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.44 IF TMDD_N86R963_Ring_Phase_Assignment_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R963_Ring_Phase_Assignment_Supported}">
                              <testStep functionId="Step 55.1.2.44.1 VERIFY that a ring-phase-assignment data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="ring-phase-assignment" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.45 IF TMDD_N86R964_Special_Function_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R964_Special_Function_Identifier_Supported}">
                              <testStep functionId="Step 55.1.2.45.1 VERIFY that a special-function-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="special-function-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.46 IF TMDD_N86R965_Special_Function_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R965_Special_Function_Description_Supported}">
                              <testStep functionId="Step 55.1.2.46.1 VERIFY that a special-function-description data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="special-function-description" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.47 IF TMDD_N86R966_Time_Reference_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R966_Time_Reference_Supported}">
                              <testStep functionId="Step 55.1.2.47.1 VERIFY that a time-reference-code data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="time-reference-code" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.48 IF TMDD_N86R967_Pattern_Sync_Reference_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N86R967_Pattern_Sync_Reference_Supported}">
                              <testStep functionId="Step 55.1.2.48.1 VERIFY that a pattern-sync-reference data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="pattern-sync-reference" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 55.1.2.49 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N86R376_Restrictions___Device_Inventory_Supported,restrictions,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R377_Device_Description_Supported,device-description,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R378_Device_Control_Type_Supported,device-control-type,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R379_Controller_Description_Supported,controller-description,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R380_Roadway_Network_Identifier___Device_Inventory_Supported,network-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R381_Node_Identifier___Device_Inventory_Supported,node-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R382_Node_Name___Device_Inventory_Supported,node-name,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R383_Link_Identifier___Device_Inventory_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R384_Link_Name___Device_Inventory_Supported,link-name,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R385_Link_Direction___Device_Inventory_Supported,link-direction,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R386_Linear_Reference___Device_Inventory_Supported,linear-reference,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R387_Linear_Reference_Version_Supported,linear-reference-version,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R388_Route_Designator___Device_Inventory_Supported,route-designator,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported,device-url,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R390_Device_URL_Reference_Medium_Supported,url-reference-medium,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url;TMDD_N86R391_Device_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N86R965_Master_Controller_Supported,controller-master-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item;TMDD_N86R966_Link_Identifiers_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link;TMDD_N86R967_Direction_of_Traffic_Supported,link-direction,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link;TMDD_N86R965_Movement_Identifier__MovementIdentifier__Supported,movement-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R966_Vehicle_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R967_Pedestrian_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R965_Departing_Link_Supported,departing-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R966_Crossing_Point_Supported,crossing-point,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R967_Turning_Movement_Approach_Vector_Supported,approach-vector,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R965_Turning_Movement_Type_Supported,turning-movement-code,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R966_Turning_Movement_Lanes_Supported,turning-movement-lanes,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R967_Turning_Movement_Description_Supported,turning-movement-text,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N86R965_Phase_Identifier__PhaseIdentifier__Supported,phase-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N86R966_Coordinated_Phase_Supported,coordinated-phase,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N86R967_Concurrent_Phases_Supported,concurrent-phases-list,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N86R965_Active_Movements_Supported,active-movements-list,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;TMDD_N86R966_Overlap_Phase_Supported,overlap-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;TMDD_N86R967_Overlap_Included_Phases_Supported,overlap-included-phases,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;TMDD_N86R965_Ring_Identifier_Supported,ring-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings;TMDD_N86R966_Ring_Phase_Assignment_Supported,ring-phase-assignment,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.ring-list.rings;TMDD_N86R967_Special_Function_Identifier_Supported,special-function-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions;TMDD_N86R965_Special_Function_Description_Supported,special-function-description,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.special-functions-list.special-functions;TMDD_N86R966_Time_Reference_Supported,time-reference-code,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item;TMDD_N86R967_Pattern_Sync_Reference_Supported,pattern-sync-reference,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item;TMDD_N86R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 55.1.2.50 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                              <jl:set var="CONTENTVERIFIED" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 55.1.2.51 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlIntersectionSignalInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter CONTENTVERIFIED = CONTENTVERIFIED PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlIntersectionSignalInventoryUpdate" functionId="dlIntersectionSignalInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N86R939_Publish_Signal_Inventory_Information_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
          <testStep functionId="Step 56 IF SubscriptionErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 56.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.6 VERIFY that data element error-code is set to SubscriptionErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${SubscriptionErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 56.7 IF TMDD_N86R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N86R14_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 56.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 57 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>