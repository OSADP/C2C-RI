<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-89-dlIntersectionSignalControlRequest-EC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalControlRequest dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.4 [Need to Control a Remote Traffic Signal Controller] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/18 00:47:52-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalControlRequest dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.4 [Need to Control a Remote Traffic Signal Controller] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Send Signal Control Response Upon Request (NTRM 3.3.5.11.3.1}.  RECORD this value as: TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter = ${TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Operator Identifier - Device Control is required by the specification. (NRTM 3.3.5.1.4.1.2.1).  RECORD this information as: TMDD_N89R403_Operator_Identifier___Device_Control_Supported = ${TMDD_N89R403_Operator_Identifier___Device_Control_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Event Identifier - Device Control is required by the specification. (NRTM 3.3.5.1.4.1.2.2).  RECORD this information as: TMDD_N89R404_Event_Identifier___Device_Control_Supported = ${TMDD_N89R404_Event_Identifier___Device_Control_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Event Response Plan - Device Control is required by the specification. (NRTM 3.3.5.1.4.1.2.3).  RECORD this information as: TMDD_N89R405_Event_Response_Plan___Device_Control_Supported = ${TMDD_N89R405_Event_Response_Plan___Device_Control_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Request Priority - Device Control is required by the specification. (NRTM 3.3.5.1.4.1.2.4).  RECORD this information as: TMDD_N89R406_Request_Priority___Device_Control_Supported = ${TMDD_N89R406_Request_Priority___Device_Control_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Control Request Start Date and Time is required by the specification. (NRTM 3.3.5.1.4.1.2.5).  RECORD this information as: TMDD_N89R407_Control_Request_Start_Date_and_Time_Supported = ${TMDD_N89R407_Control_Request_Start_Date_and_Time_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Control Request Expiration Date and Time is required by the specification. (NRTM 3.3.5.1.4.1.2.6).  RECORD this information as: TMDD_N89R408_Control_Request_Expiration_Date_and_Time_Supported = ${TMDD_N89R408_Control_Request_Expiration_Date_and_Time_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Control Request Date and Time Information is required by the specification. (NRTM 3.3.5.1.4.1.2.7).  RECORD this information as: TMDD_N89R409_Control_Request_Date_and_Time_Information_Supported = ${TMDD_N89R409_Control_Request_Date_and_Time_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Signal Timing Mode - Signal Control Request is required by the specification. (NRTM 3.3.5.11.3.2.2.1).  RECORD this information as: TMDD_N89R1008_Signal_Timing_Mode___Signal_Control_Request_Supported = ${TMDD_N89R1008_Signal_Timing_Mode___Signal_Control_Request_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Signal Timing Pattern - Signal Control Request is required by the specification. (NRTM 3.3.5.11.3.2.2.2).  RECORD this information as: TMDD_N89R1009_Signal_Timing_Pattern___Signal_Control_Request_Supported = ${TMDD_N89R1009_Signal_Timing_Pattern___Signal_Control_Request_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Offset Adjustment - Signal Control Request is required by the specification. (NRTM 3.3.5.11.3.2.2.3).  RECORD this information as: TMDD_N89R1010_Offset_Adjustment___Signal_Control_Request_Supported = ${TMDD_N89R1010_Offset_Adjustment___Signal_Control_Request_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03d" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="OC">
          <testStep functionId="Step 13 CONFIGURE: Define the response message that will be sent to the SUT.  RECORD this information as: ResponseMessage:  ${ResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 14 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 15 CONFIGURE: Identify the Username expected for authentication during this test.  RECORD this information as: Username:  ${Username}" passfailResult="False"/>
          <testStep functionId="Step 16 CONFIGURE: Identify the Password expected for authentication during this test.  RECORD this information as: Password:  ${Password}" passfailResult="False"/>
          <testStep functionId="Step 17 CONFIGURE: Identify the Operator Identifier expected for authentication during this test.  RECORD this information as: OperatorID:  ${OperatorID}" passfailResult="False"/>
          <testStep functionId="Step 18 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 19 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 20 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 21 CONFIGURE: Determine whether the SUT is expected to have valid data available for a response message in this test.  RECORD this information as: DataValid:  ${DataValid}" passfailResult="False"/>
          <testStep functionId="Step 22 REQUEST-RESPONSE-OC-RECEIVE with the following parameters:   DIALOG=dlIntersectionSignalControlRequest RESPONSETIMEREQUIRED=TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter AUTHENTICATIONCHECK = AuthenticationCheck USERNAME = Username PASSWORD = Password OPERATORID = OperatorID ALLOWACCESS = AllowAccess ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected DATAVALID = DataValid ">
               <REQUEST-RESPONSE-OC-RECEIVE Dialog="dlIntersectionSignalControlRequest" functionId="dlIntersectionSignalControlRequest" RESPONSETIMEREQUIRED="${TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter}" AUTHENTICATIONCHECK="${AuthenticationCheck}" USERNAME="${Username}" PASSWORD="${Password}" OPERATORID="${OperatorID}" ALLOWACCESS="${AllowAccess}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}" DATAVALID="${DataValid}"/>
          </testStep>
          <testStep functionId="Step 23 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 23.1 VERIFY that a device-control-request-header data frame exists within message intersectionSignalControlRequestMsg." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-control-request-header" instanceName="tmdd:intersectionSignalControlRequestMsg" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg"/>
               </testStep>
               <testStep functionId="Step 23.2 VERIFY that an authentication data frame exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="authentication" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
               </testStep>
               <testStep functionId="Step 23.3 VERIFY that an organization-requesting data frame exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="organization-requesting" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
               </testStep>
               <testStep functionId="Step 23.4 VERIFY that a device-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-id" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
               </testStep>
               <testStep functionId="Step 23.5 VERIFY that a request-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="request-id" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
               </testStep>
               <testStep functionId="Step 23.6 VERIFY that an intersectionSignalControlRequestMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="intersectionSignalControlRequestMsg" instanceName="tmdd:intersectionSignalControlRequestMsg" elementType="message" functionId="Looking for intersectionSignalControlRequestMsg"/>
               </testStep>
               <testStep functionId="Step 23.7 VERIFY that a device-control-request-header data frame exists within message intersectionSignalControlRequestMsg." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-control-request-header" instanceName="tmdd:intersectionSignalControlRequestMsg" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg"/>
               </testStep>
               <testStep functionId="Step 23.8 VERIFY that an intersection-request-command data element exists within message intersectionSignalControlRequestMsg." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="intersection-request-command" instanceName="tmdd:intersectionSignalControlRequestMsg" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg"/>
               </testStep>
               <testStep functionId="Step 23.9 IF TMDD_N89R403_Operator_Identifier___Device_Control_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R403_Operator_Identifier___Device_Control_Supported}">
                    <testStep functionId="Step 23.9.1 VERIFY that an operator-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header.authentication" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="operator-id" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header.authentication" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header.authentication"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.10 IF TMDD_N89R404_Event_Identifier___Device_Control_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R404_Event_Identifier___Device_Control_Supported}">
                    <testStep functionId="Step 23.10.1 VERIFY that an event-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="event-id" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.11 IF TMDD_N89R405_Event_Response_Plan___Device_Control_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R405_Event_Response_Plan___Device_Control_Supported}">
                    <testStep functionId="Step 23.11.1 VERIFY that a response-plan-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="response-plan-id" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.12 IF TMDD_N89R406_Request_Priority___Device_Control_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R406_Request_Priority___Device_Control_Supported}">
                    <testStep functionId="Step 23.12.1 VERIFY that a command-request-priority data element exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="command-request-priority" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.13 IF TMDD_N89R407_Control_Request_Start_Date_and_Time_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R407_Control_Request_Start_Date_and_Time_Supported}">
                    <testStep functionId="Step 23.13.1 VERIFY that a command-start-time data frame exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="command-start-time" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.14 IF TMDD_N89R408_Control_Request_Expiration_Date_and_Time_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R408_Control_Request_Expiration_Date_and_Time_Supported}">
                    <testStep functionId="Step 23.14.1 VERIFY that a command-end-time data frame exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="command-end-time" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.15 IF TMDD_N89R409_Control_Request_Date_and_Time_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R409_Control_Request_Date_and_Time_Information_Supported}">
                    <testStep functionId="Step 23.15.1 VERIFY that a command-request-time data frame exists within each instance of data frame intersectionSignalControlRequestMsg.device-control-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="command-request-time" instanceName="tmdd:intersectionSignalControlRequestMsg.device-control-request-header" elementType="data-frame" functionId="Looking for intersectionSignalControlRequestMsg.device-control-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.16 IF TMDD_N89R1008_Signal_Timing_Mode___Signal_Control_Request_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R1008_Signal_Timing_Mode___Signal_Control_Request_Supported}">
                    <testStep functionId="Step 23.16.1 VERIFY that a request-timing-mode data element exists within each instance of data frame intersectionSignalControlRequestMsg.intersection-command-parameters" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="request-timing-mode" instanceName="tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.intersection-command-parameters"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.17 IF TMDD_N89R1009_Signal_Timing_Pattern___Signal_Control_Request_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R1009_Signal_Timing_Pattern___Signal_Control_Request_Supported}">
                    <testStep functionId="Step 23.17.1 VERIFY that a timing-pattern-id data element exists within each instance of data frame intersectionSignalControlRequestMsg.intersection-command-parameters" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="timing-pattern-id" instanceName="tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.intersection-command-parameters"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.18 IF TMDD_N89R1010_Offset_Adjustment___Signal_Control_Request_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N89R1010_Offset_Adjustment___Signal_Control_Request_Supported}">
                    <testStep functionId="Step 23.18.1 VERIFY that an offset-adjustment data element exists within each instance of data frame intersectionSignalControlRequestMsg.intersection-command-parameters" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="offset-adjustment" instanceName="tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters" elementType="data-element" functionId="Looking for intersectionSignalControlRequestMsg.intersection-command-parameters"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 23.19 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N89R403_Operator_Identifier___Device_Control_Supported,operator-id,tmdd:intersectionSignalControlRequestMsg.device-control-request-header.authentication;TMDD_N89R404_Event_Identifier___Device_Control_Supported,event-id,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R405_Event_Response_Plan___Device_Control_Supported,response-plan-id,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R406_Request_Priority___Device_Control_Supported,command-request-priority,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R407_Control_Request_Start_Date_and_Time_Supported,command-start-time,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R408_Control_Request_Expiration_Date_and_Time_Supported,command-end-time,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R409_Control_Request_Date_and_Time_Information_Supported,command-request-time,tmdd:intersectionSignalControlRequestMsg.device-control-request-header;TMDD_N89R1008_Signal_Timing_Mode___Signal_Control_Request_Supported,request-timing-mode,tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters;TMDD_N89R1009_Signal_Timing_Pattern___Signal_Control_Request_Supported,timing-pattern-id,tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters;TMDD_N89R1010_Offset_Adjustment___Signal_Control_Request_Supported,offset-adjustment,tmdd:intersectionSignalControlRequestMsg.intersection-command-parameters;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
               <testStep functionId=" Step 23.20 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                    <jl:set var="CONTENTVERIFIED" value="true"/>
               </testStep>
               <postcondition>
                    <testStep functionId="Step 23.21 POSTCONDITION: REQUEST-RESPONSE-OC-REPLY with the following parameters:   DIALOG=dlIntersectionSignalControlRequest RESPONSETIMEREQUIRED=TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter CONTENTVERIFIED = CONTENTVERIFIED RESPONSEMESSAGE = ResponseMessage ">
                         <REQUEST-RESPONSE-OC-REPLY Dialog="dlIntersectionSignalControlRequest" functionId="dlIntersectionSignalControlRequest" RESPONSETIMEREQUIRED="${TMDD_N89R1005_Send_Signal_Control_Response_Upon_Request_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" RESPONSEMESSAGE="${ResponseMessage}"/>
                    </testStep>
               </postcondition>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 24 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>