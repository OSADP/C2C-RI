<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-13-dlTrafficNetworkInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.2.1 [Need to Share Node State] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/17 23:48:04-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.2.1 [Need to Share Node State] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Publish Node Status Information (NTRM 3.3.4.2.2.2}.  RECORD this value as: TMDD_N13R242_Publish_Node_Status_Information_Parameter = ${TMDD_N13R242_Publish_Node_Status_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Subscribe to Node Status Information (NTRM 3.3.4.2.2.3}.  RECORD this value as: TMDD_N13R243_Subscribe_to_Node_Status_Information_Parameter = ${TMDD_N13R243_Subscribe_to_Node_Status_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N13R14_Restrictions___Error_Report_Supported = ${TMDD_N13R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Restrictions - Node Status is required by the specification. (NRTM 3.3.4.2.2.5.2.1).  RECORD this information as: TMDD_N13R247_Restrictions___Node_Status_Supported = ${TMDD_N13R247_Restrictions___Node_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Roadway Network Name - Node Status is required by the specification. (NRTM 3.3.4.2.2.5.2.2).  RECORD this information as: TMDD_N13R248_Roadway_Network_Name___Node_Status_Supported = ${TMDD_N13R248_Roadway_Network_Name___Node_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Node Name - Node Status is required by the specification. (NRTM 3.3.4.2.2.5.2.3).  RECORD this information as: TMDD_N13R249_Node_Name___Node_Status_Supported = ${TMDD_N13R249_Node_Name___Node_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Node Status Date and Time Change Information is required by the specification. (NRTM 3.3.4.2.2.5.2.4).  RECORD this information as: TMDD_N13R250_Node_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N13R250_Node_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03d" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 9 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 10 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 11 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 12 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 13 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 14 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 15 CONFIGURE: Define the subscription message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 16 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 17 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 18 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlTrafficNetworkInformationSubscription RESPONSETIMEREQUIRED= SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlTrafficNetworkInformationSubscription" functionId="dlTrafficNetworkInformationSubscription" RESPONSETIMEREQUIRED="60000" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 19 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 19.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps.  Note:If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 19.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlNodeStatusUpdate RESPONSETIMEREQUIRED=TMDD_N13R242_Publish_Node_Status_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlNodeStatusUpdate" functionId="dlNodeStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N13R242_Publish_Node_Status_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 19.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 19.1.2.1 VERIFY that a nodeStatusMsg message was received." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="nodeStatusMsg" instanceName="tmdd:nodeStatusMsg" elementType="message" functionId="Looking for nodeStatusMsg"/>
                         </testStep>
                         <testStep functionId="Step 19.1.2.2 VERIFY that an organization-information data frame exists within each instance of data frame nodeStatusMsg.node-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:nodeStatusMsg.node-status-item" elementType="data-frame" functionId="Looking for nodeStatusMsg.node-status-item"/>
                         </testStep>
                         <testStep functionId="Step 19.1.2.3 VERIFY that a network-id data element exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-element" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                         </testStep>
                         <testStep functionId="Step 19.1.2.4 VERIFY that a node-id data element exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="node-id" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-element" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                         </testStep>
                         <testStep functionId="Step 19.1.2.5 VERIFY that a node-status data element exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="node-status" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-element" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                         </testStep>
                         <testStep functionId="Step 19.1.2.6 IF TMDD_N13R247_Restrictions___Node_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N13R247_Restrictions___Node_Status_Supported}">
                              <testStep functionId="Step 19.1.2.6.1 VERIFY that a restrictions data frame exists within each instance of data frame nodeStatusMsg.node-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:nodeStatusMsg.node-status-item" elementType="data-frame" functionId="Looking for nodeStatusMsg.node-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 19.1.2.7 IF TMDD_N13R248_Roadway_Network_Name___Node_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N13R248_Roadway_Network_Name___Node_Status_Supported}">
                              <testStep functionId="Step 19.1.2.7.1 VERIFY that a network-name data element exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="network-name" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-element" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 19.1.2.8 IF TMDD_N13R249_Node_Name___Node_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N13R249_Node_Name___Node_Status_Supported}">
                              <testStep functionId="Step 19.1.2.8.1 VERIFY that a node-name data element exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="node-name" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-element" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 19.1.2.9 IF TMDD_N13R250_Node_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N13R250_Node_Status_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 19.1.2.9.1 VERIFY that a last-update-time data frame exists within each instance of data frame nodeStatusMsg.node-status-item.node-status-list.node" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-update-time" instanceName="tmdd:nodeStatusMsg.node-status-item.node-status-list.node" elementType="data-frame" functionId="Looking for nodeStatusMsg.node-status-item.node-status-list.node"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 19.1.2.10 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N13R247_Restrictions___Node_Status_Supported,restrictions,tmdd:nodeStatusMsg.node-status-item;TMDD_N13R248_Roadway_Network_Name___Node_Status_Supported,network-name,tmdd:nodeStatusMsg.node-status-item.node-status-list.node;TMDD_N13R249_Node_Name___Node_Status_Supported,node-name,tmdd:nodeStatusMsg.node-status-item.node-status-list.node;TMDD_N13R250_Node_Status_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:nodeStatusMsg.node-status-item.node-status-list.node;TMDD_N13R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 19.1.2.11 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                              <jl:set var="CONTENTVERIFIED" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 19.1.2.12 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlNodeStatusUpdate RESPONSETIMEREQUIRED=TMDD_N13R242_Publish_Node_Status_Information_Parameter CONTENTVERIFIED = CONTENTVERIFIED PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlNodeStatusUpdate" functionId="dlNodeStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N13R242_Publish_Node_Status_Information_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
          <testStep functionId="Step 20 IF SubscriptionErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 20.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.6 VERIFY that data element error-code is set to SubscriptionErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${SubscriptionErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 20.7 IF TMDD_N13R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N13R14_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 20.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 21 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>