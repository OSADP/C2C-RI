<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-33-dlDeviceInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.3.3 [Need to Share Video Switch Status] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/18 00:05:50-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.3.3 [Need to Share Video Switch Status] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Publish Video Switch Status Information (NTRM 3.3.5.4.2.2}.  RECORD this value as: TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter = ${TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Subscribe to Video Switch Status Information (NTRM 3.3.5.4.2.3}.  RECORD this value as: TMDD_N33R559_Subscribe_to_Video_Switch_Status_Information_Parameter = ${TMDD_N33R559_Subscribe_to_Video_Switch_Status_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N33R14_Restrictions___Error_Report_Supported = ${TMDD_N33R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Restrictions - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.1).  RECORD this information as: TMDD_N33R394_Restrictions___Device_Status_Supported = ${TMDD_N33R394_Restrictions___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.5.1.3.1.2.2).  RECORD this information as: TMDD_N33R395_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N33R395_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.5.1.3.1.2.3).  RECORD this information as: TMDD_N33R396_Device_Communications_Status_Supported = ${TMDD_N33R396_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Operator Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.4).  RECORD this information as: TMDD_N33R397_Operator_Identifier___Device_Status_Supported = ${TMDD_N33R397_Operator_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Event Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.5).  RECORD this information as: TMDD_N33R398_Event_Identifier___Device_Status_Supported = ${TMDD_N33R398_Event_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Event Response Plan - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.6).  RECORD this information as: TMDD_N33R399_Event_Response_Plan___Device_Status_Supported = ${TMDD_N33R399_Event_Response_Plan___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Device Status Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.3.1.2.7).  RECORD this information as: TMDD_N33R400_Device_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N33R400_Device_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Text Insertion - Video Switch Status is required by the specification. (NRTM 3.3.5.4.2.5.2.1).  RECORD this information as: TMDD_N33R563_Text_Insertion___Video_Switch_Status_Supported = ${TMDD_N33R563_Text_Insertion___Video_Switch_Status_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03d" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 13 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 14 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 15 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 16 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 17 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 18 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 19 CONFIGURE: Define the subscription message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 20 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 21 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 22 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription RESPONSETIMEREQUIRED= SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" RESPONSETIMEREQUIRED="60000" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 23 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 23.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps.  Note:If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 23.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlVideoSwitchStatusUpdate RESPONSETIMEREQUIRED=TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlVideoSwitchStatusUpdate" functionId="dlVideoSwitchStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 23.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 23.1.2.1 VERIFY that a device-status-header data frame exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status-header" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item" elementType="data-frame" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.2 VERIFY that an organization-information data frame exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-frame" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.3 VERIFY that a device-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.4 VERIFY that a videoSwitchStatusMsg message was received." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="videoSwitchStatusMsg" instanceName="tmdd:videoSwitchStatusMsg" elementType="message" functionId="Looking for videoSwitchStatusMsg"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.5 VERIFY that a device-status-header data frame exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status-header" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item" elementType="data-frame" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.6 VERIFY that an input-channel-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="input-channel-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.7 VERIFY that an output-channel-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="output-channel-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel"/>
                         </testStep>
                         <testStep functionId="Step 23.1.2.8 IF TMDD_N33R394_Restrictions___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R394_Restrictions___Device_Status_Supported}">
                              <testStep functionId="Step 23.1.2.8.1 VERIFY that a restrictions data frame exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-frame" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.9 IF TMDD_N33R395_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R395_Unique_Identifier_of_the_Controlling_Center_Supported}">
                              <testStep functionId="Step 23.1.2.9.1 VERIFY that a center-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="center-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.10 IF TMDD_N33R396_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R396_Device_Communications_Status_Supported}">
                              <testStep functionId="Step 23.1.2.10.1 VERIFY that a device-comm-status data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-comm-status" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.11 IF TMDD_N33R397_Operator_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R397_Operator_Identifier___Device_Status_Supported}">
                              <testStep functionId="Step 23.1.2.11.1 VERIFY that an operator-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="operator-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.12 IF TMDD_N33R398_Event_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R398_Event_Identifier___Device_Status_Supported}">
                              <testStep functionId="Step 23.1.2.12.1 VERIFY that an event-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="event-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.13 IF TMDD_N33R399_Event_Response_Plan___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R399_Event_Response_Plan___Device_Status_Supported}">
                              <testStep functionId="Step 23.1.2.13.1 VERIFY that a response-plan-id data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="response-plan-id" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.14 IF TMDD_N33R400_Device_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R400_Device_Status_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 23.1.2.14.1 VERIFY that a last-comm-time data frame exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-comm-time" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header" elementType="data-frame" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.15 IF TMDD_N33R563_Text_Insertion___Video_Switch_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N33R563_Text_Insertion___Video_Switch_Status_Supported}">
                              <testStep functionId="Step 23.1.2.15.1 VERIFY that a channel-titling-text data element exists within each instance of data frame videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="channel-titling-text" instanceName="tmdd:videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel" elementType="data-element" functionId="Looking for videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 23.1.2.16 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N33R394_Restrictions___Device_Status_Supported,restrictions,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R395_Unique_Identifier_of_the_Controlling_Center_Supported,center-id,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R396_Device_Communications_Status_Supported,device-comm-status,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R397_Operator_Identifier___Device_Status_Supported,operator-id,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R398_Event_Identifier___Device_Status_Supported,event-id,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R399_Event_Response_Plan___Device_Status_Supported,response-plan-id,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R400_Device_Status_Date_and_Time_Change_Information_Supported,last-comm-time,tmdd:videoSwitchStatusMsg.video-switch-status-item.device-status-header;TMDD_N33R563_Text_Insertion___Video_Switch_Status_Supported,channel-titling-text,tmdd:videoSwitchStatusMsg.video-switch-status-item.switched-channel-list.switched-channel;TMDD_N33R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 23.1.2.17 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                              <jl:set var="CONTENTVERIFIED" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 23.1.2.18 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlVideoSwitchStatusUpdate RESPONSETIMEREQUIRED=TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter CONTENTVERIFIED = CONTENTVERIFIED PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlVideoSwitchStatusUpdate" functionId="dlVideoSwitchStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N33R558_Publish_Video_Switch_Status_Information_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
          <testStep functionId="Step 24 IF SubscriptionErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 24.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.6 VERIFY that data element error-code is set to SubscriptionErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${SubscriptionErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 24.7 IF TMDD_N33R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N33R14_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 24.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 25 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>