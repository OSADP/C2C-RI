<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-25-dlCCTVInventoryRequest-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.2.1 [Need to Share CCTV Device Inventory] and is used for both valid and invalid test cases.
       Version/Date: 2012/02/14 22:51:18-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.2.1 [Need to Share CCTV Device Inventory] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Text Insertion is required by the specification. (NRTM 3.3.6.3.1.5.2.1).  RECORD this information as: TMDD_N25R509_Text_Insertion_Supported = ${TMDD_N25R509_Text_Insertion_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Camera Type is required by the specification. (NRTM 3.3.6.3.1.5.2.2).  RECORD this information as: TMDD_N25R510_Camera_Type_Supported = ${TMDD_N25R510_Camera_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Camera Pan Left Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.3).  RECORD this information as: TMDD_N25R511_Camera_Pan_Left_Limit_Supported = ${TMDD_N25R511_Camera_Pan_Left_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Camera Pan Right Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.4).  RECORD this information as: TMDD_N25R512_Camera_Pan_Right_Limit_Supported = ${TMDD_N25R512_Camera_Pan_Right_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Camera Tilt Up Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.5).  RECORD this information as: TMDD_N25R513_Camera_Tilt_Up_Limit_Supported = ${TMDD_N25R513_Camera_Tilt_Up_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Camera Tilt Down Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.6).  RECORD this information as: TMDD_N25R514_Camera_Tilt_Down_Limit_Supported = ${TMDD_N25R514_Camera_Tilt_Down_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Camera Zoom Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.7).  RECORD this information as: TMDD_N25R515_Camera_Zoom_Limit_Supported = ${TMDD_N25R515_Camera_Zoom_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Camera Focus Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.8).  RECORD this information as: TMDD_N25R516_Camera_Focus_Limit_Supported = ${TMDD_N25R516_Camera_Focus_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Camera Iris Limit is required by the specification. (NRTM 3.3.6.3.1.5.2.9).  RECORD this information as: TMDD_N25R517_Camera_Iris_Limit_Supported = ${TMDD_N25R517_Camera_Iris_Limit_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.01" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" requestDialog="dlCCTVInventoryRequest" riMode="EC">
          <testStep functionId="Step 11 CONFIGURE: Define the message that will be sent to the SUT.  RECORD this information as: RequestMessage:  ${RequestMessage}" passfailResult="False"/>
          <testStep functionId="Step 12 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 13 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 14 REQUEST-RESPONSE-EC with the following parameters:   DIALOG=dlCCTVInventoryRequest REQUESTMESSAGE = RequestMessage ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected ">
               <REQUEST-RESPONSE-EC Dialog="dlCCTVInventoryRequest" functionId="dlCCTVInventoryRequest" REQUESTMESSAGE="${RequestMessage}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 15 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 15.1 IF TMDD_N25R509_Text_Insertion_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R509_Text_Insertion_Supported}">
                    <testStep functionId="Step 15.1.1 VERIFY that element cctv-titling-text exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-titling-text" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-titling-text"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.2 IF TMDD_N25R510_Camera_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R510_Camera_Type_Supported}">
                    <testStep functionId="Step 15.2.1 VERIFY that element cctv-camera-type exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-type" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-type"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.3 IF TMDD_N25R511_Camera_Pan_Left_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R511_Camera_Pan_Left_Limit_Supported}">
                    <testStep functionId="Step 15.3.1 VERIFY that element cctv-camera-pan-left-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-pan-left-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-pan-left-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.4 IF TMDD_N25R512_Camera_Pan_Right_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R512_Camera_Pan_Right_Limit_Supported}">
                    <testStep functionId="Step 15.4.1 VERIFY that element cctv-camera-pan-right-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-pan-right-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-pan-right-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.5 IF TMDD_N25R513_Camera_Tilt_Up_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R513_Camera_Tilt_Up_Limit_Supported}">
                    <testStep functionId="Step 15.5.1 VERIFY that element cctv-camera-tilt-up-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-tilt-up-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-tilt-up-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.6 IF TMDD_N25R514_Camera_Tilt_Down_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R514_Camera_Tilt_Down_Limit_Supported}">
                    <testStep functionId="Step 15.6.1 VERIFY that element cctv-camera-tilt-down-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-tilt-down-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-tilt-down-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.7 IF TMDD_N25R515_Camera_Zoom_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R515_Camera_Zoom_Limit_Supported}">
                    <testStep functionId="Step 15.7.1 VERIFY that element cctv-camera-zoom-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-zoom-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-zoom-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.8 IF TMDD_N25R516_Camera_Focus_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R516_Camera_Focus_Limit_Supported}">
                    <testStep functionId="Step 15.8.1 VERIFY that element cctv-camera-focus-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-focus-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-focus-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.9 IF TMDD_N25R517_Camera_Iris_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R517_Camera_Iris_Limit_Supported}">
                    <testStep functionId="Step 15.9.1 VERIFY that element cctv-camera-iris-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-iris-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.cctv-camera-iris-limit"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 15.10 VERIFY that the values within the RESPONSE message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="RESPONSE" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="RESPONSE" optionList="TMDD_N25R509_Text_Insertion_Supported,cctv-titling-text,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R510_Camera_Type_Supported,cctv-camera-type,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R511_Camera_Pan_Left_Limit_Supported,cctv-camera-pan-left-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R512_Camera_Pan_Right_Limit_Supported,cctv-camera-pan-right-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R513_Camera_Tilt_Up_Limit_Supported,cctv-camera-tilt-up-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R514_Camera_Tilt_Down_Limit_Supported,cctv-camera-tilt-down-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R515_Camera_Zoom_Limit_Supported,cctv-camera-zoom-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R516_Camera_Focus_Limit_Supported,cctv-camera-focus-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R517_Camera_Iris_Limit_Supported,cctv-camera-iris-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
          </jl:if>
     </C2CRI-session>
</testprocedure>