<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-69-dlHARMessageInventoryUpdate-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlHARMessageInventoryUpdate dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.7.9 [Need to Share HAR Messages] and is used for both valid and invalid test cases.
       Version/Date: 2012/02/14 23:09:32-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlHARMessageInventoryUpdate dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.7.9 [Need to Share HAR Messages] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Restrictions is required by the specification. (NRTM 3.3.6.8.7.5.2.1).  RECORD this information as: TMDD_N69R797_Restrictions_Supported = ${TMDD_N69R797_Restrictions_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Owner Organization is required by the specification. (NRTM 3.3.6.8.7.5.2.2).  RECORD this information as: TMDD_N69R798_Owner_Organization_Supported = ${TMDD_N69R798_Owner_Organization_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.01" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" publicationDialog="dlHARMessageInventoryUpdate" subscriptionDialog="dlDeviceInformationSubscription" riMode="EC">
          <testStep functionId="Step 4 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 5 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 6 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 7 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 8 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 9 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 10 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 11 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 12 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 13 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 14 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 14.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 14.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlHARMessageInventoryUpdate PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlHARMessageInventoryUpdate" functionId="dlHARMessageInventoryUpdate" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 14.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 14.1.2.1 IF TMDD_N69R797_Restrictions_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N69R797_Restrictions_Supported}">
                              <testStep functionId="Step 14.1.2.1.1 VERIFY that element restrictions exists within each instance of hARMessageInventoryMsg.har-message-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:hARMessageInventoryMsg.har-message-inventory-item" functionId="Looking for hARMessageInventoryMsg.har-message-inventory-item.restrictions"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 14.1.2.2 IF TMDD_N69R798_Owner_Organization_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N69R798_Owner_Organization_Supported}">
                              <testStep functionId="Step 14.1.2.2.1 VERIFY that element last-update-time exists within each instance of hARMessageInventoryMsg.har-message-inventory-item.organization-information" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="last-update-time" instanceName="tmdd:hARMessageInventoryMsg.har-message-inventory-item.organization-information" functionId="Looking for hARMessageInventoryMsg.har-message-inventory-item.organization-information.last-update-time"/>
                              </testStep>
                              <testStep functionId="Step 14.1.2.2.2 VERIFY that element last-update-time exists within each instance of hARMessageInventoryMsg.har-message-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="last-update-time" instanceName="tmdd:hARMessageInventoryMsg.har-message-inventory-item" functionId="Looking for hARMessageInventoryMsg.har-message-inventory-item.last-update-time"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 14.1.2.3 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N69R797_Restrictions_Supported,restrictions,tmdd:hARMessageInventoryMsg.har-message-inventory-item;TMDD_N69R798_Owner_Organization_Supported,last-update-time,tmdd:hARMessageInventoryMsg.har-message-inventory-item.organization-information;TMDD_N69R798_Owner_Organization_Supported,last-update-time,tmdd:hARMessageInventoryMsg.har-message-inventory-item;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 14.1.2.4 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                              <jl:set var="OptionalContentVerified" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 14.1.2.5 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlHARMessageInventoryUpdate OPTIONALCONTENTVERIFIED = OptionalContentVerified PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlHARMessageInventoryUpdate" functionId="dlHARMessageInventoryUpdate" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>