<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-95-dlDeviceInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.10.10 [Need to Share Turning Movement and Intersection Data] and is used for both valid and invalid test cases.
       Version/Date: 2012/02/14 23:21:48-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.10.10 [Need to Share Turning Movement and Intersection Data] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Link Identifiers is required by the specification. (NRTM 3.3.6.11.1.5.2.2).  RECORD this information as: TMDD_N95R908_Link_Identifiers_Supported = ${TMDD_N95R908_Link_Identifiers_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Direction of Traffic is required by the specification. (NRTM 3.3.6.11.1.5.2.3).  RECORD this information as: TMDD_N95R909_Direction_of_Traffic_Supported = ${TMDD_N95R909_Direction_of_Traffic_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Movement Identifier is required by the specification. (NRTM 3.3.6.11.1.5.2.4).  RECORD this information as: TMDD_N95R910_Movement_Identifier_Supported = ${TMDD_N95R910_Movement_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Vehicle Movement Approach Link is required by the specification. (NRTM 3.3.6.11.1.5.2.5).  RECORD this information as: TMDD_N95R911_Vehicle_Movement_Approach_Link_Supported = ${TMDD_N95R911_Vehicle_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Pedestrian Movement Approach Link is required by the specification. (NRTM 3.3.6.11.1.5.2.6).  RECORD this information as: TMDD_N95R912_Pedestrian_Movement_Approach_Link_Supported = ${TMDD_N95R912_Pedestrian_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Departing Link is required by the specification. (NRTM 3.3.6.11.1.5.2.7).  RECORD this information as: TMDD_N95R913_Departing_Link_Supported = ${TMDD_N95R913_Departing_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Crossing Point is required by the specification. (NRTM 3.3.6.11.1.5.2.8).  RECORD this information as: TMDD_N95R914_Crossing_Point_Supported = ${TMDD_N95R914_Crossing_Point_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Turning Movement Approach Vector is required by the specification. (NRTM 3.3.6.11.1.5.2.9).  RECORD this information as: TMDD_N95R915_Turning_Movement_Approach_Vector_Supported = ${TMDD_N95R915_Turning_Movement_Approach_Vector_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Turning Movement Type is required by the specification. (NRTM 3.3.6.11.1.5.2.10).  RECORD this information as: TMDD_N95R916_Turning_Movement_Type_Supported = ${TMDD_N95R916_Turning_Movement_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Turning Movement Lanes is required by the specification. (NRTM 3.3.6.11.1.5.2.11).  RECORD this information as: TMDD_N95R917_Turning_Movement_Lanes_Supported = ${TMDD_N95R917_Turning_Movement_Lanes_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Turning Movement Description is required by the specification. (NRTM 3.3.6.11.1.5.2.12).  RECORD this information as: TMDD_N95R918_Turning_Movement_Description_Supported = ${TMDD_N95R918_Turning_Movement_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Overlap Phase is required by the specification. (NRTM 3.3.6.11.1.5.2.17).  RECORD this information as: TMDD_N95R923_Overlap_Phase_Supported = ${TMDD_N95R923_Overlap_Phase_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.01" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" subscriptionDialog="dlDeviceInformationSubscription" publicationDialog="dlIntersectionSignalInventoryUpdate" riMode="EC">
          <testStep functionId="Step 14 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 15 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 16 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 17 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 18 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 19 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 20 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 21 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 22 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 23 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 24 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 24.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 24.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlIntersectionSignalInventoryUpdate PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlIntersectionSignalInventoryUpdate" functionId="dlIntersectionSignalInventoryUpdate" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 24.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 24.1.2.1 IF TMDD_N95R908_Link_Identifiers_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R908_Link_Identifiers_Supported}">
                              <testStep functionId="Step 24.1.2.1.1 VERIFY that element link-id exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.link-id"/>
                              </testStep>
                              <testStep functionId="Step 24.1.2.1.2 VERIFY that element link-id exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link.link-id"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.2 IF TMDD_N95R909_Direction_of_Traffic_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R909_Direction_of_Traffic_Supported}">
                              <testStep functionId="Step 24.1.2.2.1 VERIFY that element link-direction exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="link-direction" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.link-direction"/>
                              </testStep>
                              <testStep functionId="Step 24.1.2.2.2 VERIFY that element link-direction exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="link-direction" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link.link-direction"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.3 IF TMDD_N95R910_Movement_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R910_Movement_Identifier_Supported}">
                              <testStep functionId="Step 24.1.2.3.1 VERIFY that element movement-identifier exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="movement-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.movement-identifier"/>
                              </testStep>
                              <testStep functionId="Step 24.1.2.3.2 VERIFY that element movement-identifier exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases.active-movements-list" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="movement-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases.active-movements-list" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases.active-movements-list.movement-identifier"/>
                              </testStep>
                              <testStep functionId="Step 24.1.2.3.3 VERIFY that element movement-identifier exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases.active-movements-list" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="movement-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases.active-movements-list" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases.active-movements-list.movement-identifier"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.4 IF TMDD_N95R911_Vehicle_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R911_Vehicle_Movement_Approach_Link_Supported}">
                              <testStep functionId="Step 24.1.2.4.1 VERIFY that element approach-link-id exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.approach-link-id"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.5 IF TMDD_N95R912_Pedestrian_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R912_Pedestrian_Movement_Approach_Link_Supported}">
                              <testStep functionId="Step 24.1.2.5.1 VERIFY that element approach-link-id exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.approach-link-id"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.6 IF TMDD_N95R913_Departing_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R913_Departing_Link_Supported}">
                              <testStep functionId="Step 24.1.2.6.1 VERIFY that element departing-link-id exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="departing-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.departing-link-id"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.7 IF TMDD_N95R914_Crossing_Point_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R914_Crossing_Point_Supported}">
                              <testStep functionId="Step 24.1.2.7.1 VERIFY that element crossing-point exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="crossing-point" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.crossing-point"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.8 IF TMDD_N95R915_Turning_Movement_Approach_Vector_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R915_Turning_Movement_Approach_Vector_Supported}">
                              <testStep functionId="Step 24.1.2.8.1 VERIFY that element approach-vector exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="approach-vector" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.approach-vector"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.9 IF TMDD_N95R916_Turning_Movement_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R916_Turning_Movement_Type_Supported}">
                              <testStep functionId="Step 24.1.2.9.1 VERIFY that element turning-movement-code exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-code" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.turning-movement-code"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.10 IF TMDD_N95R917_Turning_Movement_Lanes_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R917_Turning_Movement_Lanes_Supported}">
                              <testStep functionId="Step 24.1.2.10.1 VERIFY that element turning-movement-lanes exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-lanes" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.turning-movement-lanes"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.11 IF TMDD_N95R918_Turning_Movement_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R918_Turning_Movement_Description_Supported}">
                              <testStep functionId="Step 24.1.2.11.1 VERIFY that element turning-movement-text exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-text" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements.turning-movement-text"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.12 IF TMDD_N95R923_Overlap_Phase_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N95R923_Overlap_Phase_Supported}">
                              <testStep functionId="Step 24.1.2.12.1 VERIFY that element overlap-identifier exists within each instance of intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                                   <ri-MessageVerify msgType="RESPONSE" elementName="overlap-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases.overlap-identifier"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 24.1.2.13 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N95R908_Link_Identifiers_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R908_Link_Identifiers_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link;TMDD_N95R909_Direction_of_Traffic_Supported,link-direction,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R909_Direction_of_Traffic_Supported,link-direction,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.link-list.link;TMDD_N95R910_Movement_Identifier_Supported,movement-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R910_Movement_Identifier_Supported,movement-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases.active-movements-list;TMDD_N95R910_Movement_Identifier_Supported,movement-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases.active-movements-list;TMDD_N95R911_Vehicle_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R912_Pedestrian_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R913_Departing_Link_Supported,departing-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R914_Crossing_Point_Supported,crossing-point,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R915_Turning_Movement_Approach_Vector_Supported,approach-vector,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R916_Turning_Movement_Type_Supported,turning-movement-code,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R917_Turning_Movement_Lanes_Supported,turning-movement-lanes,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R918_Turning_Movement_Description_Supported,turning-movement-text,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R923_Overlap_Phase_Supported,overlap-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 24.1.2.14 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                              <jl:set var="OptionalContentVerified" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 24.1.2.15 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlIntersectionSignalInventoryUpdate OPTIONALCONTENTVERIFIED = OptionalContentVerified PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlIntersectionSignalInventoryUpdate" functionId="dlIntersectionSignalInventoryUpdate" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>