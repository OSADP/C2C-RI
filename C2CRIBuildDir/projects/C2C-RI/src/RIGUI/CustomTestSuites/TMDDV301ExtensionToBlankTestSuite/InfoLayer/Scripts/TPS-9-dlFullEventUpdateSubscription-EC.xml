<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-9-dlFullEventUpdateSubscription-EC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlFullEventUpdateSubscription dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.4 [Need for Forecast Event Information] and is used for both valid and invalid test cases.
       Version/Date: 2012/02/14 22:41:51-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlFullEventUpdateSubscription dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.4 [Need for Forecast Event Information] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Authentication is required by the specification. (NRTM 3.3.4.4.2.1).  RECORD this information as: TMDD_N9R60_Authentication_Supported = ${TMDD_N9R60_Authentication_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Requesting Organization is required by the specification. (NRTM 3.3.4.4.2.2).  RECORD this information as: TMDD_N9R61_Requesting_Organization_Supported = ${TMDD_N9R61_Requesting_Organization_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Event Unique Identifier Filter is required by the specification. (NRTM 3.3.4.4.3.1).  RECORD this information as: TMDD_N9R62_Event_Unique_Identifier_Filter_Supported = ${TMDD_N9R62_Event_Unique_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Event Response Plan Identifier Filter is required by the specification. (NRTM 3.3.4.4.3.2).  RECORD this information as: TMDD_N9R63_Event_Response_Plan_Identifier_Filter_Supported = ${TMDD_N9R63_Event_Response_Plan_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Event Category Filter is required by the specification. (NRTM 3.3.4.4.3.3).  RECORD this information as: TMDD_N9R64_Event_Category_Filter_Supported = ${TMDD_N9R64_Event_Category_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Event Priority Filter is required by the specification. (NRTM 3.3.4.4.3.4).  RECORD this information as: TMDD_N9R65_Event_Priority_Filter_Supported = ${TMDD_N9R65_Event_Priority_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Event Description Confidence Level Filter is required by the specification. (NRTM 3.3.4.4.3.5).  RECORD this information as: TMDD_N9R66_Event_Description_Confidence_Level_Filter_Supported = ${TMDD_N9R66_Event_Description_Confidence_Level_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Event Access Level Filter is required by the specification. (NRTM 3.3.4.4.3.6).  RECORD this information as: TMDD_N9R67_Event_Access_Level_Filter_Supported = ${TMDD_N9R67_Event_Access_Level_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Event Action Flag Filter is required by the specification. (NRTM 3.3.4.4.3.7).  RECORD this information as: TMDD_N9R68_Event_Action_Flag_Filter_Supported = ${TMDD_N9R68_Event_Action_Flag_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Event Severity Filter is required by the specification. (NRTM 3.3.4.4.3.8).  RECORD this information as: TMDD_N9R69_Event_Severity_Filter_Supported = ${TMDD_N9R69_Event_Severity_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether External Center Organization Filter is required by the specification. (NRTM 3.3.4.4.3.9).  RECORD this information as: TMDD_N9R70_External_Center_Organization_Filter_Supported = ${TMDD_N9R70_External_Center_Organization_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Event Location Filter is required by the specification. (NRTM 3.3.4.4.3.10).  RECORD this information as: TMDD_N9R71_Event_Location_Filter_Supported = ${TMDD_N9R71_Event_Location_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Request Start Time Filter is required by the specification. (NRTM 3.3.4.4.3.11).  RECORD this information as: TMDD_N9R72_Request_Start_Time_Filter_Supported = ${TMDD_N9R72_Request_Start_Time_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Request End Time Filter is required by the specification. (NRTM 3.3.4.4.3.12).  RECORD this information as: TMDD_N9R73_Request_End_Time_Filter_Supported = ${TMDD_N9R73_Request_End_Time_Filter_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.01" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" subscriptionDialog="dlFullEventUpdateSubscription" publicationDialog="dlFullEventUpdateUpdate" riMode="OC">
          <testStep functionId="Step 16 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: PublicationMessage:  ${PublicationMessage}" passfailResult="False"/>
          <testStep functionId="Step 17 CONFIGURE: Determine the number of publication message transmissions that will be performed within this test.  RECORD this information as: PublicationCount:  ${PublicationCount}" passfailResult="False"/>
          <testStep functionId="Step 18 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 19 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 20 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 21 CONFIGURE: Identify the Username expected for authentication during this test.  RECORD this information as: Username:  ${Username}" passfailResult="False"/>
          <testStep functionId="Step 22 CONFIGURE: Identify the Password expected for authentication during this test.  RECORD this information as: Password:  ${Password}" passfailResult="False"/>
          <testStep functionId="Step 23 CONFIGURE: Identify the Organization Identifier expected for authentication during this test.  RECORD this information as: OrganizationID:  ${OrganizationID}" passfailResult="False"/>
          <testStep functionId="Step 24 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 25 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 26 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 27 CONFIGURE: Define the subscription response message that will be sent to the SUT.  RECORD this information as: SubscriptionResponseMessage:  ${SubscriptionResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 28 SUBSCRIPTION-OC-RECEIVE with the following parameters:   DIALOG=dlFullEventUpdateSubscription AUTHENTICATIONCHECK = AuthenticationCheck USERNAME = Username PASSWORD = Password ORGANIZATIONID = OrganizationID ALLOWACCESS = AllowAccess SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-OC-RECEIVE Dialog="dlFullEventUpdateSubscription" functionId="dlFullEventUpdateSubscription" AUTHENTICATIONCHECK="${AuthenticationCheck}" USERNAME="${Username}" PASSWORD="${Password}" ORGANIZATIONID="${OrganizationID}" ALLOWACCESS="${AllowAccess}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 29 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 29.1 IF TMDD_N9R60_Authentication_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R60_Authentication_Supported}">
                    <testStep functionId="Step 29.1.1 VERIFY that element authentication exists within eventRequestMsg" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="authentication" instanceName="tmdd:eventRequestMsg" functionId="Looking for eventRequestMsg.authentication"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.2 IF TMDD_N9R61_Requesting_Organization_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R61_Requesting_Organization_Supported}">
                    <testStep functionId="Step 29.2.1 VERIFY that element organization-requesting exists within each instance of eventRequestMsg.request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="organization-requesting" instanceName="tmdd:eventRequestMsg.request-header" functionId="Looking for eventRequestMsg.request-header.organization-requesting"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.3 IF TMDD_N9R62_Event_Unique_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R62_Event_Unique_Identifier_Filter_Supported}">
                    <testStep functionId="Step 29.3.1 VERIFY that element request-focus exists within each instance of eventRequestMsg.request-type" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="request-focus" instanceName="tmdd:eventRequestMsg.request-type" functionId="Looking for eventRequestMsg.request-type.request-focus"/>
                    </testStep>
                    <testStep functionId="Step 29.3.2 VERIFY that element event-ids exists within each instance of eventRequestMsg.request-type" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="event-ids" instanceName="tmdd:eventRequestMsg.request-type" functionId="Looking for eventRequestMsg.request-type.event-ids"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.4 IF TMDD_N9R63_Event_Response_Plan_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R63_Event_Response_Plan_Identifier_Filter_Supported}">
                    <testStep functionId="Step 29.4.1 VERIFY that element response-plan-ids exists within each instance of eventRequestMsg.request-type" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="response-plan-ids" instanceName="tmdd:eventRequestMsg.request-type" functionId="Looking for eventRequestMsg.request-type.response-plan-ids"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.5 IF TMDD_N9R64_Event_Category_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R64_Event_Category_Filter_Supported}">
                    <testStep functionId="Step 29.5.1 VERIFY that element category exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="category" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.category"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.6 IF TMDD_N9R65_Event_Priority_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R65_Event_Priority_Filter_Supported}">
                    <testStep functionId="Step 29.6.1 VERIFY that element priority-level exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="priority-level" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.priority-level"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.7 IF TMDD_N9R66_Event_Description_Confidence_Level_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R66_Event_Description_Confidence_Level_Filter_Supported}">
                    <testStep functionId="Step 29.7.1 VERIFY that element confidence-level exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="confidence-level" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.confidence-level"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.8 IF TMDD_N9R67_Event_Access_Level_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R67_Event_Access_Level_Filter_Supported}">
                    <testStep functionId="Step 29.8.1 VERIFY that element access-level exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="access-level" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.access-level"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.9 IF TMDD_N9R68_Event_Action_Flag_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R68_Event_Action_Flag_Filter_Supported}">
                    <testStep functionId="Step 29.9.1 VERIFY that element action-request-flag exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="action-request-flag" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.action-request-flag"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.10 IF TMDD_N9R69_Event_Severity_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R69_Event_Severity_Filter_Supported}">
                    <testStep functionId="Step 29.10.1 VERIFY that element severity exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="severity" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.severity"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.11 IF TMDD_N9R70_External_Center_Organization_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R70_External_Center_Organization_Filter_Supported}">
                    <testStep functionId="Step 29.11.1 VERIFY that element organizations-requested exists within each instance of eventRequestMsg.request-filters.request-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="organizations-requested" instanceName="tmdd:eventRequestMsg.request-filters.request-filter" functionId="Looking for eventRequestMsg.request-filters.request-filter.organizations-requested"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.12 IF TMDD_N9R71_Event_Location_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R71_Event_Location_Filter_Supported}">
                    <testStep functionId="Step 29.12.1 VERIFY that element request-locations exists within eventRequestMsg" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="request-locations" instanceName="tmdd:eventRequestMsg" functionId="Looking for eventRequestMsg.request-locations"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.13 IF TMDD_N9R72_Request_Start_Time_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R72_Request_Start_Time_Filter_Supported}">
                    <testStep functionId="Step 29.13.1 VERIFY that element start-time exists within each instance of eventRequestMsg.request-times" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="start-time" instanceName="tmdd:eventRequestMsg.request-times" functionId="Looking for eventRequestMsg.request-times.start-time"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.14 IF TMDD_N9R73_Request_End_Time_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N9R73_Request_End_Time_Filter_Supported}">
                    <testStep functionId="Step 29.14.1 VERIFY that element end-time exists within each instance of eventRequestMsg.request-times" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="end-time" instanceName="tmdd:eventRequestMsg.request-times" functionId="Looking for eventRequestMsg.request-times.end-time"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 29.15 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N9R60_Authentication_Supported,authentication,tmdd:eventRequestMsg;TMDD_N9R61_Requesting_Organization_Supported,organization-requesting,tmdd:eventRequestMsg.request-header;TMDD_N9R62_Event_Unique_Identifier_Filter_Supported,request-focus,tmdd:eventRequestMsg.request-type;TMDD_N9R62_Event_Unique_Identifier_Filter_Supported,event-ids,tmdd:eventRequestMsg.request-type;TMDD_N9R63_Event_Response_Plan_Identifier_Filter_Supported,response-plan-ids,tmdd:eventRequestMsg.request-type;TMDD_N9R64_Event_Category_Filter_Supported,category,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R65_Event_Priority_Filter_Supported,priority-level,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R66_Event_Description_Confidence_Level_Filter_Supported,confidence-level,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R67_Event_Access_Level_Filter_Supported,access-level,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R68_Event_Action_Flag_Filter_Supported,action-request-flag,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R69_Event_Severity_Filter_Supported,severity,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R70_External_Center_Organization_Filter_Supported,organizations-requested,tmdd:eventRequestMsg.request-filters.request-filter;TMDD_N9R71_Event_Location_Filter_Supported,request-locations,tmdd:eventRequestMsg;TMDD_N9R72_Request_Start_Time_Filter_Supported,start-time,tmdd:eventRequestMsg.request-times;TMDD_N9R73_Request_End_Time_Filter_Supported,end-time,tmdd:eventRequestMsg.request-times;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
               <testStep functionId=" Step 29.16 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                    <jl:set var="OptionalContentVerified" value="true"/>
               </testStep>
               <postcondition>
                    <testStep functionId="Step 29.17 POSTCONDITION: SUBSCRIPTION-OC-REPLY with the following parameters:   DIALOG=dlFullEventUpdateSubscription OPTIONALCONTENTVERIFIED = OptionalContentVerified SUBSCRIPTIONRESPONSEMESSAGE = SubscriptionResponseMessage ">
                         <SUBSCRIPTION-OC-REPLY Dialog="dlFullEventUpdateSubscription" functionId="dlFullEventUpdateSubscription" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" SUBSCRIPTIONRESPONSEMESSAGE="${SubscriptionResponseMessage}"/>
                    </testStep>
               </postcondition>
               <testStep functionId="Step 29.18 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 29.18.1 PUBLICATION-OC with the following parameters:   DIALOG=dlFullEventUpdateUpdate PUBLICATIONMESSAGE = PublicationMessage PUBLICATIONCOUNT = PublicationCount PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-OC Dialog="dlFullEventUpdateUpdate" functionId="dlFullEventUpdateUpdate" PUBLICATIONMESSAGE="${PublicationMessage}" PUBLICATIONCOUNT="${PublicationCount}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}"/>
                    </testStep>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>