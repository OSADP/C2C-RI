<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-20-dlDetectorStatusUpdate-EC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDetectorStatusUpdate dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.1.3 [Need to Share Detector Status] and is used for both valid and invalid test cases.
       Version/Date: 2012/02/14 22:48:41-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDetectorStatusUpdate dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.1.3 [Need to Share Detector Status] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Authentication is required by the specification. (NRTM 3.3.6.1.1.1.2.1).  RECORD this information as: TMDD_N20R365_Authentication_Supported = ${TMDD_N20R365_Authentication_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether External Center Organization is required by the specification. (NRTM 3.3.6.1.1.1.2.2).  RECORD this information as: TMDD_N20R366_External_Center_Organization_Supported = ${TMDD_N20R366_External_Center_Organization_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Content of Device Information Request Filter is required by the specification. (NRTM 3.3.6.1.1.1.3).  RECORD this information as: TMDD_N20R367_Content_of_Device_Information_Request_Filter_Supported = ${TMDD_N20R367_Content_of_Device_Information_Request_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Device Identifier Filter is required by the specification. (NRTM 3.3.6.1.1.1.3.1).  RECORD this information as: TMDD_N20R368_Device_Identifier_Filter_Supported = ${TMDD_N20R368_Device_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Roadway Network Identifier Filter is required by the specification. (NRTM 3.3.6.1.1.1.3.2).  RECORD this information as: TMDD_N20R369_Roadway_Network_Identifier_Filter_Supported = ${TMDD_N20R369_Roadway_Network_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Link Identifier Filter is required by the specification. (NRTM 3.3.6.1.1.1.3.3).  RECORD this information as: TMDD_N20R370_Link_Identifier_Filter_Supported = ${TMDD_N20R370_Link_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Route Designator Filter is required by the specification. (NRTM 3.3.6.1.1.1.3.4).  RECORD this information as: TMDD_N20R371_Route_Designator_Filter_Supported = ${TMDD_N20R371_Route_Designator_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Linear Reference Filter is required by the specification. (NRTM 3.3.6.1.1.1.3.5).  RECORD this information as: TMDD_N20R372_Linear_Reference_Filter_Supported = ${TMDD_N20R372_Linear_Reference_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Authentication is required by the specification. (NRTM 3.3.6.1.2.1.2.1).  RECORD this information as: TMDD_N20R377_Authentication_Supported = ${TMDD_N20R377_Authentication_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.6.1.2.1.2.2).  RECORD this information as: TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.6.1.2.1.2.2).  RECORD this information as: TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.6.1.2.1.2.2).  RECORD this information as: TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.6.1.2.1.2.2).  RECORD this information as: TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.6.1.2.1.2.3).  RECORD this information as: TMDD_N20R380_Device_Communications_Status_Supported = ${TMDD_N20R380_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.6.1.2.1.2.3).  RECORD this information as: TMDD_N20R381_Device_Communications_Status_Supported = ${TMDD_N20R381_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.6.1.2.1.2.3).  RECORD this information as: TMDD_N20R380_Device_Communications_Status_Supported = ${TMDD_N20R380_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.6.1.2.1.2.3).  RECORD this information as: TMDD_N20R381_Device_Communications_Status_Supported = ${TMDD_N20R381_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R383_Operator_Identifier_Supported = ${TMDD_N20R383_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R382_Operator_Identifier_Supported = ${TMDD_N20R382_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R384_Operator_Identifier_Supported = ${TMDD_N20R384_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R384_Operator_Identifier_Supported = ${TMDD_N20R384_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R383_Operator_Identifier_Supported = ${TMDD_N20R383_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R382_Operator_Identifier_Supported = ${TMDD_N20R382_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R383_Operator_Identifier_Supported = ${TMDD_N20R383_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R384_Operator_Identifier_Supported = ${TMDD_N20R384_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Operator Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.4).  RECORD this information as: TMDD_N20R382_Operator_Identifier_Supported = ${TMDD_N20R382_Operator_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 28 CONFIGURE: Determine whether Event Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.5).  RECORD this information as: TMDD_N20R385_Event_Identifier_Supported = ${TMDD_N20R385_Event_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 29 CONFIGURE: Determine whether Event Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.5).  RECORD this information as: TMDD_N20R386_Event_Identifier_Supported = ${TMDD_N20R386_Event_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 30 CONFIGURE: Determine whether Event Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.5).  RECORD this information as: TMDD_N20R386_Event_Identifier_Supported = ${TMDD_N20R386_Event_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 31 CONFIGURE: Determine whether Event Identifier is required by the specification. (NRTM 3.3.6.1.2.1.2.5).  RECORD this information as: TMDD_N20R385_Event_Identifier_Supported = ${TMDD_N20R385_Event_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 32 CONFIGURE: Determine whether Event Response Plan is required by the specification. (NRTM 3.3.6.1.2.1.2.6).  RECORD this information as: TMDD_N20R388_Event_Response_Plan_Supported = ${TMDD_N20R388_Event_Response_Plan_Supported}" passfailResult="False"/>
     <testStep functionId="Step 33 CONFIGURE: Determine whether Event Response Plan is required by the specification. (NRTM 3.3.6.1.2.1.2.6).  RECORD this information as: TMDD_N20R387_Event_Response_Plan_Supported = ${TMDD_N20R387_Event_Response_Plan_Supported}" passfailResult="False"/>
     <testStep functionId="Step 34 CONFIGURE: Determine whether Event Response Plan is required by the specification. (NRTM 3.3.6.1.2.1.2.6).  RECORD this information as: TMDD_N20R387_Event_Response_Plan_Supported = ${TMDD_N20R387_Event_Response_Plan_Supported}" passfailResult="False"/>
     <testStep functionId="Step 35 CONFIGURE: Determine whether Event Response Plan is required by the specification. (NRTM 3.3.6.1.2.1.2.6).  RECORD this information as: TMDD_N20R388_Event_Response_Plan_Supported = ${TMDD_N20R388_Event_Response_Plan_Supported}" passfailResult="False"/>
     <testStep functionId="Step 36 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 37 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 38 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 39 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 40 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 41 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 42 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 43 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 44 CONFIGURE: Determine whether Status Date and Time Change Information is required by the specification. (NRTM 3.3.6.1.2.1.2.7).  RECORD this information as: TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.01" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" publicationDialog="dlDetectorStatusUpdate" subscriptionDialog="dlDeviceInformationSubscription" riMode="OC">
          <testStep functionId="Step 45 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: PublicationMessage:  ${PublicationMessage}" passfailResult="False"/>
          <testStep functionId="Step 46 CONFIGURE: Determine the number of publication message transmissions that will be performed within this test.  RECORD this information as: PublicationCount:  ${PublicationCount}" passfailResult="False"/>
          <testStep functionId="Step 47 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 48 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 49 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 50 CONFIGURE: Identify the Username expected for authentication during this test.  RECORD this information as: Username:  ${Username}" passfailResult="False"/>
          <testStep functionId="Step 51 CONFIGURE: Identify the Password expected for authentication during this test.  RECORD this information as: Password:  ${Password}" passfailResult="False"/>
          <testStep functionId="Step 52 CONFIGURE: Identify the Organization Identifier expected for authentication during this test.  RECORD this information as: OrganizationID:  ${OrganizationID}" passfailResult="False"/>
          <testStep functionId="Step 53 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 54 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 55 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 56 CONFIGURE: Define the subscription response message that will be sent to the SUT.  RECORD this information as: SubscriptionResponseMessage:  ${SubscriptionResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 57 SUBSCRIPTION-OC-RECEIVE with the following parameters:   DIALOG=dlDeviceInformationSubscription AUTHENTICATIONCHECK = AuthenticationCheck USERNAME = Username PASSWORD = Password ORGANIZATIONID = OrganizationID ALLOWACCESS = AllowAccess SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-OC-RECEIVE Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" AUTHENTICATIONCHECK="${AuthenticationCheck}" USERNAME="${Username}" PASSWORD="${Password}" ORGANIZATIONID="${OrganizationID}" ALLOWACCESS="${AllowAccess}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 58 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 58.1 IF TMDD_N20R365_Authentication_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R365_Authentication_Supported}">
                    <testStep functionId="Step 58.1.1 VERIFY that element authentication exists within deviceInformationRequestMsg" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="authentication" instanceName="tmdd:deviceInformationRequestMsg" functionId="Looking for deviceInformationRequestMsg.authentication"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.2 IF TMDD_N20R366_External_Center_Organization_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R366_External_Center_Organization_Supported}">
                    <testStep functionId="Step 58.2.1 VERIFY that element organization-requesting exists within deviceInformationRequestMsg" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="organization-requesting" instanceName="tmdd:deviceInformationRequestMsg" functionId="Looking for deviceInformationRequestMsg.organization-requesting"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.3 IF TMDD_N20R367_Content_of_Device_Information_Request_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R367_Content_of_Device_Information_Request_Filter_Supported}">
                    <testStep functionId="Step 58.3.1 VERIFY that element device-filter exists within deviceInformationRequestMsg" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="device-filter" instanceName="tmdd:deviceInformationRequestMsg" functionId="Looking for deviceInformationRequestMsg.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.4 IF TMDD_N20R368_Device_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R368_Device_Identifier_Filter_Supported}">
                    <testStep functionId="Step 58.4.1 VERIFY that element device-id-list exists within each instance of deviceInformationRequestMsg.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="device-id-list" instanceName="tmdd:deviceInformationRequestMsg.device-filter" functionId="Looking for deviceInformationRequestMsg.device-filter.device-id-list"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.5 IF TMDD_N20R369_Roadway_Network_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R369_Roadway_Network_Identifier_Filter_Supported}">
                    <testStep functionId="Step 58.5.1 VERIFY that element network-id-list exists within each instance of deviceInformationRequestMsg.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id-list" instanceName="tmdd:deviceInformationRequestMsg.device-filter" functionId="Looking for deviceInformationRequestMsg.device-filter.network-id-list"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.6 IF TMDD_N20R370_Link_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R370_Link_Identifier_Filter_Supported}">
                    <testStep functionId="Step 58.6.1 VERIFY that element link-id-list exists within each instance of deviceInformationRequestMsg.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="link-id-list" instanceName="tmdd:deviceInformationRequestMsg.device-filter" functionId="Looking for deviceInformationRequestMsg.device-filter.link-id-list"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.7 IF TMDD_N20R371_Route_Designator_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R371_Route_Designator_Filter_Supported}">
                    <testStep functionId="Step 58.7.1 VERIFY that element link-designator-list exists within each instance of deviceInformationRequestMsg.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="link-designator-list" instanceName="tmdd:deviceInformationRequestMsg.device-filter" functionId="Looking for deviceInformationRequestMsg.device-filter.link-designator-list"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.8 IF TMDD_N20R372_Linear_Reference_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R372_Linear_Reference_Filter_Supported}">
                    <testStep functionId="Step 58.8.1 VERIFY that element linear-reference exists within each instance of deviceInformationRequestMsg.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="linear-reference" instanceName="tmdd:deviceInformationRequestMsg.device-filter" functionId="Looking for deviceInformationRequestMsg.device-filter.linear-reference"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.9 IF TMDD_N20R377_Authentication_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R377_Authentication_Supported}"></jl:if>
               <testStep functionId="Step 58.10 IF TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported}"></jl:if>
               <testStep functionId="Step 58.11 IF TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported}"></jl:if>
               <testStep functionId="Step 58.12 IF TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R379_Unique_Identifier_of_the_Controlling_Center_Supported}"></jl:if>
               <testStep functionId="Step 58.13 IF TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R378_Unique_Identifier_of_the_Controlling_Center_Supported}"></jl:if>
               <testStep functionId="Step 58.14 IF TMDD_N20R380_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R380_Device_Communications_Status_Supported}"></jl:if>
               <testStep functionId="Step 58.15 IF TMDD_N20R381_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R381_Device_Communications_Status_Supported}"></jl:if>
               <testStep functionId="Step 58.16 IF TMDD_N20R380_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R380_Device_Communications_Status_Supported}"></jl:if>
               <testStep functionId="Step 58.17 IF TMDD_N20R381_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R381_Device_Communications_Status_Supported}"></jl:if>
               <testStep functionId="Step 58.18 IF TMDD_N20R383_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R383_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.19 IF TMDD_N20R382_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R382_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.20 IF TMDD_N20R384_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R384_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.21 IF TMDD_N20R384_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R384_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.22 IF TMDD_N20R383_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R383_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.23 IF TMDD_N20R382_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R382_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.24 IF TMDD_N20R383_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R383_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.25 IF TMDD_N20R384_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R384_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.26 IF TMDD_N20R382_Operator_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R382_Operator_Identifier_Supported}"></jl:if>
               <testStep functionId="Step 58.27 IF TMDD_N20R385_Event_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R385_Event_Identifier_Supported}">
                    <testStep functionId="Step 58.27.1 VERIFY that element network-id exists within each instance of deviceInformationRequestMsg.device-filter.network-id-list" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:deviceInformationRequestMsg.device-filter.network-id-list" functionId="Looking for deviceInformationRequestMsg.device-filter.network-id-list.network-id"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.28 IF TMDD_N20R386_Event_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R386_Event_Identifier_Supported}">
                    <testStep functionId="Step 58.28.1 VERIFY that element network-id exists within each instance of deviceInformationRequestMsg.device-filter.network-id-list" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:deviceInformationRequestMsg.device-filter.network-id-list" functionId="Looking for deviceInformationRequestMsg.device-filter.network-id-list.network-id"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.29 IF TMDD_N20R386_Event_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R386_Event_Identifier_Supported}">
                    <testStep functionId="Step 58.29.1 VERIFY that element network-id exists within each instance of deviceInformationRequestMsg.device-filter.network-id-list" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:deviceInformationRequestMsg.device-filter.network-id-list" functionId="Looking for deviceInformationRequestMsg.device-filter.network-id-list.network-id"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.30 IF TMDD_N20R385_Event_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R385_Event_Identifier_Supported}">
                    <testStep functionId="Step 58.30.1 VERIFY that element network-id exists within each instance of deviceInformationRequestMsg.device-filter.network-id-list" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:deviceInformationRequestMsg.device-filter.network-id-list" functionId="Looking for deviceInformationRequestMsg.device-filter.network-id-list.network-id"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 58.31 IF TMDD_N20R388_Event_Response_Plan_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R388_Event_Response_Plan_Supported}"></jl:if>
               <testStep functionId="Step 58.32 IF TMDD_N20R387_Event_Response_Plan_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R387_Event_Response_Plan_Supported}"></jl:if>
               <testStep functionId="Step 58.33 IF TMDD_N20R387_Event_Response_Plan_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R387_Event_Response_Plan_Supported}"></jl:if>
               <testStep functionId="Step 58.34 IF TMDD_N20R388_Event_Response_Plan_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R388_Event_Response_Plan_Supported}"></jl:if>
               <testStep functionId="Step 58.35 IF TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.36 IF TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.37 IF TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.38 IF TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.39 IF TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.40 IF TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.41 IF TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R389_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.42 IF TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R391_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.43 IF TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N20R390_Status_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 58.44 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N20R365_Authentication_Supported,authentication,tmdd:deviceInformationRequestMsg;TMDD_N20R366_External_Center_Organization_Supported,organization-requesting,tmdd:deviceInformationRequestMsg;TMDD_N20R367_Content_of_Device_Information_Request_Filter_Supported,device-filter,tmdd:deviceInformationRequestMsg;TMDD_N20R368_Device_Identifier_Filter_Supported,device-id-list,tmdd:deviceInformationRequestMsg.device-filter;TMDD_N20R369_Roadway_Network_Identifier_Filter_Supported,network-id-list,tmdd:deviceInformationRequestMsg.device-filter;TMDD_N20R370_Link_Identifier_Filter_Supported,link-id-list,tmdd:deviceInformationRequestMsg.device-filter;TMDD_N20R371_Route_Designator_Filter_Supported,link-designator-list,tmdd:deviceInformationRequestMsg.device-filter;TMDD_N20R372_Linear_Reference_Filter_Supported,linear-reference,tmdd:deviceInformationRequestMsg.device-filter;TMDD_N20R385_Event_Identifier_Supported,network-id,tmdd:deviceInformationRequestMsg.device-filter.network-id-list;TMDD_N20R386_Event_Identifier_Supported,network-id,tmdd:deviceInformationRequestMsg.device-filter.network-id-list;TMDD_N20R386_Event_Identifier_Supported,network-id,tmdd:deviceInformationRequestMsg.device-filter.network-id-list;TMDD_N20R385_Event_Identifier_Supported,network-id,tmdd:deviceInformationRequestMsg.device-filter.network-id-list;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
               <testStep functionId=" Step 58.45 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                    <jl:set var="OptionalContentVerified" value="true"/>
               </testStep>
               <postcondition>
                    <testStep functionId="Step 58.46 POSTCONDITION: SUBSCRIPTION-OC-REPLY with the following parameters:   DIALOG=dlDeviceInformationSubscription OPTIONALCONTENTVERIFIED = OptionalContentVerified SUBSCRIPTIONRESPONSEMESSAGE = SubscriptionResponseMessage ">
                         <SUBSCRIPTION-OC-REPLY Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" SUBSCRIPTIONRESPONSEMESSAGE="${SubscriptionResponseMessage}"/>
                    </testStep>
               </postcondition>
               <testStep functionId="Step 58.47 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 58.47.1 PUBLICATION-OC with the following parameters:   DIALOG=dlDetectorStatusUpdate PUBLICATIONMESSAGE = PublicationMessage PUBLICATIONCOUNT = PublicationCount PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-OC Dialog="dlDetectorStatusUpdate" functionId="dlDetectorStatusUpdate" PUBLICATIONMESSAGE="${PublicationMessage}" PUBLICATIONCOUNT="${PublicationCount}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}"/>
                    </testStep>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>