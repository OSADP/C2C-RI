<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-27-dlCCTVStatusRequest-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVStatusRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.3 [Need to Share CCTV Device Status] and is used for both valid and invalid test cases.
       Version/Date: 2013/11/28 11:46:05-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVStatusRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.3 [Need to Share CCTV Device Status] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Send CCTV Status Information Upon Request (NTRM 3.3.5.3.2.1}.  RECORD this value as: TMDD_N27R524_Send_CCTV_Status_Information_Upon_Request_Parameter = ${TMDD_N27R524_Send_CCTV_Status_Information_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Restrictions - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.1).  RECORD this information as: TMDD_N27R394_Restrictions___Device_Status_Supported = ${TMDD_N27R394_Restrictions___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.5.1.3.1.2.2).  RECORD this information as: TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.5.1.3.1.2.3).  RECORD this information as: TMDD_N27R396_Device_Communications_Status_Supported = ${TMDD_N27R396_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Operator Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.4).  RECORD this information as: TMDD_N27R397_Operator_Identifier___Device_Status_Supported = ${TMDD_N27R397_Operator_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Event Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.5).  RECORD this information as: TMDD_N27R398_Event_Identifier___Device_Status_Supported = ${TMDD_N27R398_Event_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Event Response Plan - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.6).  RECORD this information as: TMDD_N27R399_Event_Response_Plan___Device_Status_Supported = ${TMDD_N27R399_Event_Response_Plan___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Device Status Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.3.1.2.7).  RECORD this information as: TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether CCTV Error is required by the specification. (NRTM 3.3.5.3.2.5.2.1).  RECORD this information as: TMDD_N27R530_CCTV_Error_Supported = ${TMDD_N27R530_CCTV_Error_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether CCTV Format is required by the specification. (NRTM 3.3.5.3.2.5.2.2).  RECORD this information as: TMDD_N27R531_CCTV_Format_Supported = ${TMDD_N27R531_CCTV_Format_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether CCTV Preset Position is required by the specification. (NRTM 3.3.5.3.2.5.2.3).  RECORD this information as: TMDD_N27R532_CCTV_Preset_Position_Supported = ${TMDD_N27R532_CCTV_Preset_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether CCTV Pan Position is required by the specification. (NRTM 3.3.5.3.2.5.2.4).  RECORD this information as: TMDD_N27R533_CCTV_Pan_Position_Supported = ${TMDD_N27R533_CCTV_Pan_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether CCTV Tilt Position is required by the specification. (NRTM 3.3.5.3.2.5.2.5).  RECORD this information as: TMDD_N27R534_CCTV_Tilt_Position_Supported = ${TMDD_N27R534_CCTV_Tilt_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether CCTV Zoom Position is required by the specification. (NRTM 3.3.5.3.2.5.2.6).  RECORD this information as: TMDD_N27R535_CCTV_Zoom_Position_Supported = ${TMDD_N27R535_CCTV_Zoom_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether CCTV Iris Position is required by the specification. (NRTM 3.3.5.3.2.5.2.7).  RECORD this information as: TMDD_N27R536_CCTV_Iris_Position_Supported = ${TMDD_N27R536_CCTV_Iris_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether CCTV Focus Position is required by the specification. (NRTM 3.3.5.3.2.5.2.8).  RECORD this information as: TMDD_N27R537_CCTV_Focus_Position_Supported = ${TMDD_N27R537_CCTV_Focus_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Camera Environmental Features Status is required by the specification. (NRTM 3.3.5.3.2.5.2.9).  RECORD this information as: TMDD_N27R538_Camera_Environmental_Features_Status_Supported = ${TMDD_N27R538_Camera_Environmental_Features_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N27R14_Restrictions___Error_Report_Supported = ${TMDD_N27R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 20 CONFIGURE: Define the message that will be sent to the SUT.  RECORD this information as: RequestMessage:  ${RequestMessage}" passfailResult="False"/>
          <testStep functionId="Step 21 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 22 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 23 REQUEST-RESPONSE-EC with the following parameters:   DIALOG=dlCCTVStatusRequest RESPONSETIMEREQUIRED=TMDD_N27R524_Send_CCTV_Status_Information_Upon_Request_Parameter REQUESTMESSAGE = RequestMessage ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected ">
               <REQUEST-RESPONSE-EC Dialog="dlCCTVStatusRequest" functionId="dlCCTVStatusRequest" RESPONSETIMEREQUIRED="${TMDD_N27R524_Send_CCTV_Status_Information_Upon_Request_Parameter}" REQUESTMESSAGE="${RequestMessage}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 24 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 24.1 VERIFY that a device-status-header data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
               </testStep>
               <testStep functionId="Step 24.2 VERIFY that a device-status-header data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
               </testStep>
               <testStep functionId="Step 24.3 VERIFY that an organization-information data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
               </testStep>
               <testStep functionId="Step 24.4 VERIFY that a device-id data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
               </testStep>
               <testStep functionId="Step 24.5 VERIFY that a device-status data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
               </testStep>
               <testStep functionId="Step 24.6 VERIFY that a cCTVStatusMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="cCTVStatusMsg" instanceName="tmdd:cCTVStatusMsg" elementType="message" functionId="Looking for cCTVStatusMsg"/>
               </testStep>
               <testStep functionId="Step 24.7 VERIFY that a device-status-header data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
               </testStep>
               <testStep functionId="Step 24.8 IF TMDD_N27R394_Restrictions___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R394_Restrictions___Device_Status_Supported}">
                    <testStep functionId="Step 24.8.1 VERIFY that a restrictions data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.9 IF TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported}">
                    <testStep functionId="Step 24.9.1 VERIFY that a center-id data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="center-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.10 IF TMDD_N27R396_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R396_Device_Communications_Status_Supported}">
                    <testStep functionId="Step 24.10.1 VERIFY that a device-comm-status data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-comm-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.11 IF TMDD_N27R397_Operator_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R397_Operator_Identifier___Device_Status_Supported}">
                    <testStep functionId="Step 24.11.1 VERIFY that an operator-id data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="operator-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.12 IF TMDD_N27R398_Event_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R398_Event_Identifier___Device_Status_Supported}">
                    <testStep functionId="Step 24.12.1 VERIFY that an event-id data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="event-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.13 IF TMDD_N27R399_Event_Response_Plan___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R399_Event_Response_Plan___Device_Status_Supported}">
                    <testStep functionId="Step 24.13.1 VERIFY that a response-plan-id data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="response-plan-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.14 IF TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported}">
                    <testStep functionId="Step 24.14.1 VERIFY that a last-comm-time data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="last-comm-time" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.15 IF TMDD_N27R530_CCTV_Error_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R530_CCTV_Error_Supported}">
                    <testStep functionId="Step 24.15.1 VERIFY that a cctv-error data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-error" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.16 IF TMDD_N27R531_CCTV_Format_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R531_CCTV_Format_Supported}">
                    <testStep functionId="Step 24.16.1 VERIFY that a cctv-image-list data frame exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-image-list" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.17 IF TMDD_N27R532_CCTV_Preset_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R532_CCTV_Preset_Position_Supported}">
                    <testStep functionId="Step 24.17.1 VERIFY that a cctv-position-preset data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-preset" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.18 IF TMDD_N27R533_CCTV_Pan_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R533_CCTV_Pan_Position_Supported}">
                    <testStep functionId="Step 24.18.1 VERIFY that a cctv-position-pan data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-pan" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.19 IF TMDD_N27R534_CCTV_Tilt_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R534_CCTV_Tilt_Position_Supported}">
                    <testStep functionId="Step 24.19.1 VERIFY that a cctv-position-tilt data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-tilt" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.20 IF TMDD_N27R535_CCTV_Zoom_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R535_CCTV_Zoom_Position_Supported}">
                    <testStep functionId="Step 24.20.1 VERIFY that a cctv-position-zoom-lens data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-zoom-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.21 IF TMDD_N27R536_CCTV_Iris_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R536_CCTV_Iris_Position_Supported}">
                    <testStep functionId="Step 24.21.1 VERIFY that a cctv-position-iris-lens data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-iris-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.22 IF TMDD_N27R537_CCTV_Focus_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R537_CCTV_Focus_Position_Supported}">
                    <testStep functionId="Step 24.22.1 VERIFY that a cctv-position-focus-lens data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-position-focus-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.23 IF TMDD_N27R538_Camera_Environmental_Features_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R538_Camera_Environmental_Features_Status_Supported}">
                    <testStep functionId="Step 24.23.1 VERIFY that a cctv-environmental-status data element exists within each instance of data frame cCTVStatusMsg.cctv-status-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-environmental-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 24.24 VERIFY that the values within the RESPONSE message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="RESPONSE" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="RESPONSE" optionList="TMDD_N27R394_Restrictions___Device_Status_Supported,restrictions,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported,center-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R396_Device_Communications_Status_Supported,device-comm-status,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R397_Operator_Identifier___Device_Status_Supported,operator-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R398_Event_Identifier___Device_Status_Supported,event-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R399_Event_Response_Plan___Device_Status_Supported,response-plan-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported,last-comm-time,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R530_CCTV_Error_Supported,cctv-error,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R531_CCTV_Format_Supported,cctv-image-list,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R532_CCTV_Preset_Position_Supported,cctv-position-preset,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R533_CCTV_Pan_Position_Supported,cctv-position-pan,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R534_CCTV_Tilt_Position_Supported,cctv-position-tilt,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R535_CCTV_Zoom_Position_Supported,cctv-position-zoom-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R536_CCTV_Iris_Position_Supported,cctv-position-iris-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R537_CCTV_Focus_Position_Supported,cctv-position-focus-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R538_Camera_Environmental_Features_Status_Supported,cctv-environmental-status,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
          </jl:if>
          <testStep functionId="Step 25 IF ErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 25.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.6 VERIFY that data element error-code is set to ErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${ErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 25.7 IF TMDD_N27R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N27R14_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 25.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <testStep functionId=" Step 26 EXIT" passfailResult="False"/>
     </C2CRI-session>
</testprocedure>