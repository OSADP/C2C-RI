<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-93-dlIntersectionSignalTimingPatternInventorySubscription-EC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalTimingPatternInventorySubscription dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.8 [Need to Share Controller Timing Patterns] and is used for both valid and invalid test cases.
       Version/Date: 2013/11/28 12:24:10-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalTimingPatternInventorySubscription dialog as an EC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.8 [Need to Share Controller Timing Patterns] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Publish Signal Timing Pattern Information (NTRM 3.3.5.11.7.2}.  RECORD this value as: TMDD_N93R1027_Publish_Signal_Timing_Pattern_Information_Parameter = ${TMDD_N93R1027_Publish_Signal_Timing_Pattern_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Subscribe to Signal Timing Pattern Information (NTRM 3.3.5.11.7.3}.  RECORD this value as: TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter = ${TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Authentication - Device Information (DeviceAuth) is required by the specification. (NRTM 3.3.5.1.1.1.2.1).  RECORD this information as: TMDD_N93R364_Authentication___Device_Information__DeviceAuth__Supported = ${TMDD_N93R364_Authentication___Device_Information__DeviceAuth__Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Operator Identifier - Device Information is required by the specification. (NRTM 3.3.5.1.1.1.2.1.1).  RECORD this information as: TMDD_N93R365_Operator_Identifier___Device_Information_Supported = ${TMDD_N93R365_Operator_Identifier___Device_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether External Center Organization - Device Information is required by the specification. (NRTM 3.3.5.1.1.1.2.2).  RECORD this information as: TMDD_N93R366_External_Center_Organization___Device_Information_Supported = ${TMDD_N93R366_External_Center_Organization___Device_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Device Identifier Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.1).  RECORD this information as: TMDD_N93R367_Device_Identifier_Filter_Supported = ${TMDD_N93R367_Device_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Roadway Network Identifier Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.2).  RECORD this information as: TMDD_N93R368_Roadway_Network_Identifier_Filter_Supported = ${TMDD_N93R368_Roadway_Network_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Link Identifier Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.3).  RECORD this information as: TMDD_N93R369_Link_Identifier_Filter_Supported = ${TMDD_N93R369_Link_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Route Designator Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.4).  RECORD this information as: TMDD_N93R370_Route_Designator_Filter_Supported = ${TMDD_N93R370_Route_Designator_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Linear Reference Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.5).  RECORD this information as: TMDD_N93R371_Linear_Reference_Filter_Supported = ${TMDD_N93R371_Linear_Reference_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Pattern Identifier Filter is required by the specification. (NRTM 3.3.5.1.1.1.3.7).  RECORD this information as: TMDD_N93R373_Pattern_Identifier_Filter_Supported = ${TMDD_N93R373_Pattern_Identifier_Filter_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Timing Pattern Identifier is required by the specification. (NRTM 3.3.5.11.7.4.2.1).  RECORD this information as: TMDD_N93R1031_Timing_Pattern_Identifier_Supported = ${TMDD_N93R1031_Timing_Pattern_Identifier_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N93R14_Restrictions___Error_Report_Supported = ${TMDD_N93R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="OC">
          <testStep functionId="Step 15 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: PublicationMessage:  ${PublicationMessage}" passfailResult="False"/>
          <testStep functionId="Step 16 CONFIGURE: Determine the number of publication message transmissions that will be performed within this test.  RECORD this information as: PublicationCount:  ${PublicationCount}" passfailResult="False"/>
          <testStep functionId="Step 17 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 18 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 19 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 20 CONFIGURE: Identify the Username expected for authentication during this test.  RECORD this information as: Username:  ${Username}" passfailResult="False"/>
          <testStep functionId="Step 21 CONFIGURE: Identify the Password expected for authentication during this test.  RECORD this information as: Password:  ${Password}" passfailResult="False"/>
          <testStep functionId="Step 22 CONFIGURE: Identify the Operator Identifier expected for authentication during this test.  RECORD this information as: OperatorID:  ${OperatorID}" passfailResult="False"/>
          <testStep functionId="Step 23 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 24 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 25 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 26 CONFIGURE: Define the subscription response message that will be sent to the SUT.  RECORD this information as: SubscriptionResponseMessage:  ${SubscriptionResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 27 SUBSCRIPTION-OC-RECEIVE with the following parameters:   DIALOG=dlIntersectionSignalTimingPatternInventorySubscription RESPONSETIMEREQUIRED=TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter AUTHENTICATIONCHECK = AuthenticationCheck USERNAME = Username PASSWORD = Password OPERATORID = OperatorID ALLOWACCESS = AllowAccess SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-OC-RECEIVE Dialog="dlIntersectionSignalTimingPatternInventorySubscription" functionId="dlIntersectionSignalTimingPatternInventorySubscription" RESPONSETIMEREQUIRED="${TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter}" AUTHENTICATIONCHECK="${AuthenticationCheck}" USERNAME="${Username}" PASSWORD="${Password}" OPERATORID="${OperatorID}" ALLOWACCESS="${AllowAccess}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 28 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 28.1 VERIFY that an organization-information data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" elementType="data-frame" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
               </testStep>
               <testStep functionId="Step 28.2 VERIFY that a device-type data element exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
               </testStep>
               <testStep functionId="Step 28.3 VERIFY that a device-information-type data element exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-information-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
               </testStep>
               <testStep functionId="Step 28.4 VERIFY that an intersectionSignalTimingPatternInventoryRequestMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="intersectionSignalTimingPatternInventoryRequestMsg" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg" elementType="message" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg"/>
               </testStep>
               <testStep functionId="Step 28.5 VERIFY that a device-information-request-header data frame exists within message intersectionSignalTimingPatternInventoryRequestMsg." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-information-request-header" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg" elementType="data-frame" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg"/>
               </testStep>
               <testStep functionId="Step 28.6 VERIFY that data element device-information-type is set to device plan." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-information-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" instanceValue="device plan" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
               </testStep>
               <testStep functionId="Step 28.7 VERIFY that data element device-type is set to signal controller." passfailResult="True">
                    <ri-MessageVerify msgType="REQUEST" elementName="device-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" instanceValue="signal controller" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
               </testStep>
               <testStep functionId="Step 28.8 IF TMDD_N93R364_Authentication___Device_Information__DeviceAuth__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R364_Authentication___Device_Information__DeviceAuth__Supported}">
                    <testStep functionId="Step 28.8.1 VERIFY that an authentication data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="authentication" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" elementType="data-frame" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.9 IF TMDD_N93R365_Operator_Identifier___Device_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R365_Operator_Identifier___Device_Information_Supported}">
                    <testStep functionId="Step 28.9.1 VERIFY that an operator-id data element exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.authentication" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="operator-id" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.authentication" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.authentication"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.10 IF TMDD_N93R366_External_Center_Organization___Device_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R366_External_Center_Organization___Device_Information_Supported}">
                    <testStep functionId="Step 28.10.1 VERIFY that an organization-requesting data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="organization-requesting" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" elementType="data-frame" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.11 IF TMDD_N93R367_Device_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R367_Device_Identifier_Filter_Supported}">
                    <testStep functionId="Step 28.11.1 VERIFY that a device-id-list data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="device-id-list" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.12 IF TMDD_N93R368_Roadway_Network_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R368_Roadway_Network_Identifier_Filter_Supported}">
                    <testStep functionId="Step 28.12.1 VERIFY that a network-id-list data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="network-id-list" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.13 IF TMDD_N93R369_Link_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R369_Link_Identifier_Filter_Supported}">
                    <testStep functionId="Step 28.13.1 VERIFY that a link-id-list data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="link-id-list" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.14 IF TMDD_N93R370_Route_Designator_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R370_Route_Designator_Filter_Supported}">
                    <testStep functionId="Step 28.14.1 VERIFY that a link-designator-list data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="link-designator-list" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.15 IF TMDD_N93R371_Linear_Reference_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R371_Linear_Reference_Filter_Supported}">
                    <testStep functionId="Step 28.15.1 VERIFY that a linear-reference data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="linear-reference" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-frame" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.16 IF TMDD_N93R373_Pattern_Identifier_Filter_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R373_Pattern_Identifier_Filter_Supported}">
                    <testStep functionId="Step 28.16.1 VERIFY that a pattern-id-list data frame exists within each instance of data frame intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="pattern-id-list" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.17 IF TMDD_N93R1031_Timing_Pattern_Identifier_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N93R1031_Timing_Pattern_Identifier_Supported}">
                    <testStep functionId="Step 28.17.1 VERIFY that a timing-pattern-id data element exists within message intersectionSignalTimingPatternInventoryRequestMsg." passfailResult="True">
                         <ri-MessageVerify msgType="REQUEST" elementName="timing-pattern-id" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 28.18 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N93R364_Authentication___Device_Information__DeviceAuth__Supported,authentication,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header;TMDD_N93R365_Operator_Identifier___Device_Information_Supported,operator-id,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.authentication;TMDD_N93R366_External_Center_Organization___Device_Information_Supported,organization-requesting,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header;TMDD_N93R367_Device_Identifier_Filter_Supported,device-id-list,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R368_Roadway_Network_Identifier_Filter_Supported,network-id-list,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R369_Link_Identifier_Filter_Supported,link-id-list,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R370_Route_Designator_Filter_Supported,link-designator-list,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R371_Linear_Reference_Filter_Supported,linear-reference,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R373_Pattern_Identifier_Filter_Supported,pattern-id-list,tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header.device-filter;TMDD_N93R1031_Timing_Pattern_Identifier_Supported,timing-pattern-id,tmdd:intersectionSignalTimingPatternInventoryRequestMsg;TMDD_N93R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
               <testStep functionId=" Step 28.19 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                    <jl:set var="CONTENTVERIFIED" value="true"/>
               </testStep>
               <postcondition>
                    <testStep functionId="Step 28.20 POSTCONDITION: SUBSCRIPTION-OC-REPLY with the following parameters:   DIALOG=dlIntersectionSignalTimingPatternInventorySubscription RESPONSETIMEREQUIRED=TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter CONTENTVERIFIED = CONTENTVERIFIED SUBSCRIPTIONRESPONSEMESSAGE = SubscriptionResponseMessage ">
                         <SUBSCRIPTION-OC-REPLY Dialog="dlIntersectionSignalTimingPatternInventorySubscription" functionId="dlIntersectionSignalTimingPatternInventorySubscription" RESPONSETIMEREQUIRED="${TMDD_N93R1028_Subscribe_to_Signal_Timing_Pattern_Information_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" SUBSCRIPTIONRESPONSEMESSAGE="${SubscriptionResponseMessage}"/>
                    </testStep>
               </postcondition>
               <testStep functionId="Step 28.21 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps.  Note:If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 28.21.1 PUBLICATION-OC with the following parameters:   DIALOG=dlIntersectionSignalTimingPatternInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N93R1027_Publish_Signal_Timing_Pattern_Information_Parameter PUBLICATIONMESSAGE = PublicationMessage PUBLICATIONCOUNT = PublicationCount PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-OC Dialog="dlIntersectionSignalTimingPatternInventoryUpdate" functionId="dlIntersectionSignalTimingPatternInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N93R1027_Publish_Signal_Timing_Pattern_Information_Parameter}" PUBLICATIONMESSAGE="${PublicationMessage}" PUBLICATIONCOUNT="${PublicationCount}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}"/>
                    </testStep>
                    <testStep functionId="Step 28.21.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 28.21.2.1 VERIFY that data element device-information-type is set to device plan." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-information-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" instanceValue="device plan" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
                         </testStep>
                         <testStep functionId="Step 28.21.2.2 VERIFY that data element device-type is set to signal controller." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-type" instanceName="tmdd:intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header" instanceValue="signal controller" elementType="data-element" functionId="Looking for intersectionSignalTimingPatternInventoryRequestMsg.device-information-request-header"/>
                         </testStep>
                    </jl:if>
                    <testStep functionId="Step 28.21.3 IF PublicationErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${PublicationErrorResponseExpected}">
                         <testStep functionId="Step 28.21.3.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.6 VERIFY that data element error-code is set to PublicationErrorResponseTypeExpected." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${PublicationErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.21.3.7 IF TMDD_N93R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N93R14_Restrictions___Error_Report_Supported}">
                              <testStep functionId="Step 28.21.3.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                              </testStep>
                         </jl:if>
                    </jl:if>
               </jl:while>
          </jl:if>
          <testStep functionId=" Step 29 EXIT" passfailResult="False"/>
     </C2CRI-session>
</testprocedure>