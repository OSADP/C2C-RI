<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-110-dlLinkInventoryRequest-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlLinkInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.1.6 [Need for Roadway Characteristics Data] and is used for both valid and invalid test cases.
       Version/Date: 2013/11/28 12:36:35-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlLinkInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.6.1.6 [Need for Roadway Characteristics Data] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Send Link Status Information Upon Request (NTRM 3.3.4.3.2.1}.  RECORD this value as: TMDD_N110R275_Send_Link_Status_Information_Upon_Request_Parameter = ${TMDD_N110R275_Send_Link_Status_Information_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Send Node Inventory Information Upon Request (NTRM 3.3.4.2.1.1}.  RECORD this value as: TMDD_N110R225_Send_Node_Inventory_Information_Upon_Request_Parameter = ${TMDD_N110R225_Send_Node_Inventory_Information_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine the dialog performance requirement for Send Link Inventory Information Upon Request (NTRM 3.3.4.3.1.1}.  RECORD this value as: TMDD_N110R251_Send_Link_Inventory_Information_Upon_Request_Parameter = ${TMDD_N110R251_Send_Link_Inventory_Information_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Restrictions - Node Inventory is required by the specification. (NRTM 3.3.4.2.1.5.2.1).  RECORD this information as: TMDD_N110R231_Restrictions___Node_Inventory_Supported = ${TMDD_N110R231_Restrictions___Node_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Roadway Network Name - Node Inventory is required by the specification. (NRTM 3.3.4.2.1.5.2.2).  RECORD this information as: TMDD_N110R232_Roadway_Network_Name___Node_Inventory_Supported = ${TMDD_N110R232_Roadway_Network_Name___Node_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Node Name - Node Inventory is required by the specification. (NRTM 3.3.4.2.1.5.2.3).  RECORD this information as: TMDD_N110R233_Node_Name___Node_Inventory_Supported = ${TMDD_N110R233_Node_Name___Node_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Node Description is required by the specification. (NRTM 3.3.4.2.1.5.2.4).  RECORD this information as: TMDD_N110R234_Node_Description_Supported = ${TMDD_N110R234_Node_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Route Designator - Node Inventory is required by the specification. (NRTM 3.3.4.2.1.5.2.5).  RECORD this information as: TMDD_N110R235_Route_Designator___Node_Inventory_Supported = ${TMDD_N110R235_Route_Designator___Node_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Node Direction is required by the specification. (NRTM 3.3.4.2.1.5.2.6).  RECORD this information as: TMDD_N110R236_Node_Direction_Supported = ${TMDD_N110R236_Node_Direction_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Linear Reference - Node Inventory is required by the specification. (NRTM 3.3.4.2.1.5.2.7).  RECORD this information as: TMDD_N110R237_Linear_Reference___Node_Inventory_Supported = ${TMDD_N110R237_Linear_Reference___Node_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Node Type is required by the specification. (NRTM 3.3.4.2.1.5.2.8).  RECORD this information as: TMDD_N110R238_Node_Type_Supported = ${TMDD_N110R238_Node_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Number of Links is required by the specification. (NRTM 3.3.4.2.1.5.2.9).  RECORD this information as: TMDD_N110R239_Number_of_Links_Supported = ${TMDD_N110R239_Number_of_Links_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Node Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.4.2.1.5.2.10).  RECORD this information as: TMDD_N110R240_Node_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N110R240_Node_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Restrictions - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.1).  RECORD this information as: TMDD_N110R257_Restrictions___Link_Inventory_Supported = ${TMDD_N110R257_Restrictions___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Roadway Network Name - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.2).  RECORD this information as: TMDD_N110R258_Roadway_Network_Name___Link_Inventory_Supported = ${TMDD_N110R258_Roadway_Network_Name___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Link Name - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.3).  RECORD this information as: TMDD_N110R259_Link_Name___Link_Inventory_Supported = ${TMDD_N110R259_Link_Name___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Alternate Names - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.4).  RECORD this information as: TMDD_N110R260_Alternate_Names___Link_Inventory_Supported = ${TMDD_N110R260_Alternate_Names___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Route Designator - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.5).  RECORD this information as: TMDD_N110R261_Route_Designator___Link_Inventory_Supported = ${TMDD_N110R261_Route_Designator___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Secondary Route Designator is required by the specification. (NRTM 3.3.4.3.1.5.2.6).  RECORD this information as: TMDD_N110R262_Secondary_Route_Designator_Supported = ${TMDD_N110R262_Secondary_Route_Designator_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether Linear Reference - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.7).  RECORD this information as: TMDD_N110R263_Linear_Reference___Link_Inventory_Supported = ${TMDD_N110R263_Linear_Reference___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Link Length is required by the specification. (NRTM 3.3.4.3.1.5.2.8).  RECORD this information as: TMDD_N110R264_Link_Length_Supported = ${TMDD_N110R264_Link_Length_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Link Capacity is required by the specification. (NRTM 3.3.4.3.1.5.2.9).  RECORD this information as: TMDD_N110R265_Link_Capacity_Supported = ${TMDD_N110R265_Link_Capacity_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Link Speed Limit - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.10).  RECORD this information as: TMDD_N110R266_Link_Speed_Limit___Link_Inventory_Supported = ${TMDD_N110R266_Link_Speed_Limit___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Link Truck Speed Limit - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.11).  RECORD this information as: TMDD_N110R267_Link_Truck_Speed_Limit___Link_Inventory_Supported = ${TMDD_N110R267_Link_Truck_Speed_Limit___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Speed Limit Units - Link Inventory is required by the specification. (NRTM 3.3.4.3.1.5.2.12).  RECORD this information as: TMDD_N110R268_Speed_Limit_Units___Link_Inventory_Supported = ${TMDD_N110R268_Speed_Limit_Units___Link_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Link Law Enforcement Jurisdiction is required by the specification. (NRTM 3.3.4.3.1.5.2.13).  RECORD this information as: TMDD_N110R269_Link_Law_Enforcement_Jurisdiction_Supported = ${TMDD_N110R269_Link_Law_Enforcement_Jurisdiction_Supported}" passfailResult="False"/>
     <testStep functionId="Step 28 CONFIGURE: Determine whether Designated Owner is required by the specification. (NRTM 3.3.4.3.1.5.2.14).  RECORD this information as: TMDD_N110R270_Designated_Owner_Supported = ${TMDD_N110R270_Designated_Owner_Supported}" passfailResult="False"/>
     <testStep functionId="Step 29 CONFIGURE: Determine whether Left Shoulder Width is required by the specification. (NRTM 3.3.4.3.1.5.2.15).  RECORD this information as: TMDD_N110R271_Left_Shoulder_Width_Supported = ${TMDD_N110R271_Left_Shoulder_Width_Supported}" passfailResult="False"/>
     <testStep functionId="Step 30 CONFIGURE: Determine whether Right Shoulder Width is required by the specification. (NRTM 3.3.4.3.1.5.2.16).  RECORD this information as: TMDD_N110R272_Right_Shoulder_Width_Supported = ${TMDD_N110R272_Right_Shoulder_Width_Supported}" passfailResult="False"/>
     <testStep functionId="Step 31 CONFIGURE: Determine whether Median Type is required by the specification. (NRTM 3.3.4.3.1.5.2.17).  RECORD this information as: TMDD_N110R273_Median_Type_Supported = ${TMDD_N110R273_Median_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 32 CONFIGURE: Determine whether Link Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.4.3.1.5.2.18).  RECORD this information as: TMDD_N110R274_Link_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N110R274_Link_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 33 CONFIGURE: Determine whether Link Name - Link Status is required by the specification. (NRTM 3.3.4.3.2.5.2.2).  RECORD this information as: TMDD_N110R282_Link_Name___Link_Status_Supported = ${TMDD_N110R282_Link_Name___Link_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 34 CONFIGURE: Determine whether Link Direction - Link Status is required by the specification. (NRTM 3.3.4.3.2.5.2.3).  RECORD this information as: TMDD_N110R283_Link_Direction___Link_Status_Supported = ${TMDD_N110R283_Link_Direction___Link_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 35 CONFIGURE: Determine whether Link Priority is required by the specification. (NRTM 3.3.4.3.2.5.2.5).  RECORD this information as: TMDD_N110R285_Link_Priority_Supported = ${TMDD_N110R285_Link_Priority_Supported}" passfailResult="False"/>
     <testStep functionId="Step 36 CONFIGURE: Determine whether Link Restrictions - Axles is required by the specification. (NRTM 3.3.4.3.2.5.2.6).  RECORD this information as: TMDD_N110R286_Link_Restrictions___Axles_Supported = ${TMDD_N110R286_Link_Restrictions___Axles_Supported}" passfailResult="False"/>
     <testStep functionId="Step 37 CONFIGURE: Determine whether Link Restrictions - Height is required by the specification. (NRTM 3.3.4.3.2.5.2.7).  RECORD this information as: TMDD_N110R287_Link_Restrictions___Height_Supported = ${TMDD_N110R287_Link_Restrictions___Height_Supported}" passfailResult="False"/>
     <testStep functionId="Step 38 CONFIGURE: Determine whether Link Restrictions - Length is required by the specification. (NRTM 3.3.4.3.2.5.2.8).  RECORD this information as: TMDD_N110R288_Link_Restrictions___Length_Supported = ${TMDD_N110R288_Link_Restrictions___Length_Supported}" passfailResult="False"/>
     <testStep functionId="Step 39 CONFIGURE: Determine whether Link Restrictions - Weight is required by the specification. (NRTM 3.3.4.3.2.5.2.9).  RECORD this information as: TMDD_N110R289_Link_Restrictions___Weight_Supported = ${TMDD_N110R289_Link_Restrictions___Weight_Supported}" passfailResult="False"/>
     <testStep functionId="Step 40 CONFIGURE: Determine whether Link Restrictions - Width is required by the specification. (NRTM 3.3.4.3.2.5.2.10).  RECORD this information as: TMDD_N110R290_Link_Restrictions___Width_Supported = ${TMDD_N110R290_Link_Restrictions___Width_Supported}" passfailResult="False"/>
     <testStep functionId="Step 41 CONFIGURE: Determine whether Link Restrictions - Axle Weight is required by the specification. (NRTM 3.3.4.3.2.5.2.11).  RECORD this information as: TMDD_N110R291_Link_Restrictions___Axle_Weight_Supported = ${TMDD_N110R291_Link_Restrictions___Axle_Weight_Supported}" passfailResult="False"/>
     <testStep functionId="Step 42 CONFIGURE: Determine whether Link Surface Conditions is required by the specification. (NRTM 3.3.4.3.2.5.2.13).  RECORD this information as: TMDD_N110R293_Link_Surface_Conditions_Supported = ${TMDD_N110R293_Link_Surface_Conditions_Supported}" passfailResult="False"/>
     <testStep functionId="Step 43 CONFIGURE: Determine whether Link Saturation is required by the specification. (NRTM 3.3.4.3.2.5.2.14).  RECORD this information as: TMDD_N110R294_Link_Saturation_Supported = ${TMDD_N110R294_Link_Saturation_Supported}" passfailResult="False"/>
     <testStep functionId="Step 44 CONFIGURE: Determine whether Link Saturation Threshold is required by the specification. (NRTM 3.3.4.3.2.5.2.15).  RECORD this information as: TMDD_N110R295_Link_Saturation_Threshold_Supported = ${TMDD_N110R295_Link_Saturation_Threshold_Supported}" passfailResult="False"/>
     <testStep functionId="Step 45 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N110R14_Restrictions___Error_Report_Supported = ${TMDD_N110R14_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 46 CONFIGURE: Define the message that will be sent to the SUT.  RECORD this information as: RequestMessage:  ${RequestMessage}" passfailResult="False"/>
          <testStep functionId="Step 47 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 48 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 49 REQUEST-RESPONSE-EC with the following parameters:   DIALOG=dlLinkInventoryRequest RESPONSETIMEREQUIRED=TMDD_N110R251_Send_Link_Inventory_Information_Upon_Request_Parameter REQUESTMESSAGE = RequestMessage ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected ">
               <REQUEST-RESPONSE-EC Dialog="dlLinkInventoryRequest" functionId="dlLinkInventoryRequest" RESPONSETIMEREQUIRED="${TMDD_N110R251_Send_Link_Inventory_Information_Upon_Request_Parameter}" REQUESTMESSAGE="${RequestMessage}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 50 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 50.1 VERIFY that a linkInventoryMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="linkInventoryMsg" instanceName="tmdd:linkInventoryMsg" elementType="message" functionId="Looking for linkInventoryMsg"/>
               </testStep>
               <testStep functionId="Step 50.2 VERIFY that an organization-information data frame exists within each instance of data frame linkInventoryMsg.link-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:linkInventoryMsg.link-inventory-item" elementType="data-frame" functionId="Looking for linkInventoryMsg.link-inventory-item"/>
               </testStep>
               <testStep functionId="Step 50.3 VERIFY that a network-id data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="network-id" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.4 VERIFY that a link-id data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.5 VERIFY that a link-type data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-type" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.6 VERIFY that a link-begin-node-id data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-begin-node-id" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.7 VERIFY that a link-begin-node-location data frame exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-begin-node-location" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-frame" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.8 VERIFY that a link-end-node-id data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-end-node-id" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.9 VERIFY that a link-end-node-location data frame exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="link-end-node-location" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-frame" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
               </testStep>
               <testStep functionId="Step 50.10 IF TMDD_N110R231_Restrictions___Node_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R231_Restrictions___Node_Inventory_Supported}"></jl:if>
               <testStep functionId="Step 50.11 IF TMDD_N110R232_Roadway_Network_Name___Node_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R232_Roadway_Network_Name___Node_Inventory_Supported}"></jl:if>
               <testStep functionId="Step 50.12 IF TMDD_N110R233_Node_Name___Node_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R233_Node_Name___Node_Inventory_Supported}"></jl:if>
               <testStep functionId="Step 50.13 IF TMDD_N110R234_Node_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R234_Node_Description_Supported}"></jl:if>
               <testStep functionId="Step 50.14 IF TMDD_N110R235_Route_Designator___Node_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R235_Route_Designator___Node_Inventory_Supported}"></jl:if>
               <testStep functionId="Step 50.15 IF TMDD_N110R236_Node_Direction_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R236_Node_Direction_Supported}"></jl:if>
               <testStep functionId="Step 50.16 IF TMDD_N110R237_Linear_Reference___Node_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R237_Linear_Reference___Node_Inventory_Supported}"></jl:if>
               <testStep functionId="Step 50.17 IF TMDD_N110R238_Node_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R238_Node_Type_Supported}"></jl:if>
               <testStep functionId="Step 50.18 IF TMDD_N110R239_Number_of_Links_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R239_Number_of_Links_Supported}"></jl:if>
               <testStep functionId="Step 50.19 IF TMDD_N110R240_Node_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R240_Node_Inventory_Date_and_Time_Change_Information_Supported}"></jl:if>
               <testStep functionId="Step 50.20 IF TMDD_N110R257_Restrictions___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R257_Restrictions___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.20.1 VERIFY that a restrictions data frame exists within each instance of data frame linkInventoryMsg.link-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:linkInventoryMsg.link-inventory-item" elementType="data-frame" functionId="Looking for linkInventoryMsg.link-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.21 IF TMDD_N110R258_Roadway_Network_Name___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R258_Roadway_Network_Name___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.21.1 VERIFY that a network-name data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="network-name" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.22 IF TMDD_N110R259_Link_Name___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R259_Link_Name___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.22.1 VERIFY that a link-name data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-name" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.23 IF TMDD_N110R260_Alternate_Names___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R260_Alternate_Names___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.23.1 VERIFY that an alternate-link-name data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="alternate-link-name" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.24 IF TMDD_N110R261_Route_Designator___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R261_Route_Designator___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.24.1 VERIFY that a link-route-designator data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-route-designator" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.25 IF TMDD_N110R262_Secondary_Route_Designator_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R262_Secondary_Route_Designator_Supported}">
                    <testStep functionId="Step 50.25.1 VERIFY that a secondary-link-route-designator data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="secondary-link-route-designator" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.26 IF TMDD_N110R263_Linear_Reference___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R263_Linear_Reference___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.26.1 VERIFY that a linear-reference data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="linear-reference" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
                    <testStep functionId="Step 50.26.2 VERIFY that a linear-reference-version data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="linear-reference-version" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.27 IF TMDD_N110R264_Link_Length_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R264_Link_Length_Supported}">
                    <testStep functionId="Step 50.27.1 VERIFY that a link-length data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-length" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.28 IF TMDD_N110R265_Link_Capacity_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R265_Link_Capacity_Supported}">
                    <testStep functionId="Step 50.28.1 VERIFY that a link-capacity data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-capacity" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.29 IF TMDD_N110R266_Link_Speed_Limit___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R266_Link_Speed_Limit___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.29.1 VERIFY that a link-speed-limit data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-speed-limit" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.30 IF TMDD_N110R267_Link_Truck_Speed_Limit___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R267_Link_Truck_Speed_Limit___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.30.1 VERIFY that a link-speed-limit-truck data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-speed-limit-truck" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.31 IF TMDD_N110R268_Speed_Limit_Units___Link_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R268_Speed_Limit_Units___Link_Inventory_Supported}">
                    <testStep functionId="Step 50.31.1 VERIFY that a link-speed-limit-units data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-speed-limit-units" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.32 IF TMDD_N110R269_Link_Law_Enforcement_Jurisdiction_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R269_Link_Law_Enforcement_Jurisdiction_Supported}">
                    <testStep functionId="Step 50.32.1 VERIFY that a link-jurisdiction data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-jurisdiction" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.33 IF TMDD_N110R270_Designated_Owner_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R270_Designated_Owner_Supported}">
                    <testStep functionId="Step 50.33.1 VERIFY that a link-owner data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-owner" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.34 IF TMDD_N110R271_Left_Shoulder_Width_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R271_Left_Shoulder_Width_Supported}">
                    <testStep functionId="Step 50.34.1 VERIFY that a left-shoulder-width data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="left-shoulder-width" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.35 IF TMDD_N110R272_Right_Shoulder_Width_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R272_Right_Shoulder_Width_Supported}">
                    <testStep functionId="Step 50.35.1 VERIFY that a right-shoulder-width data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="right-shoulder-width" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.36 IF TMDD_N110R273_Median_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R273_Median_Type_Supported}">
                    <testStep functionId="Step 50.36.1 VERIFY that a lane-separator data element exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="lane-separator" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-element" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.37 IF TMDD_N110R274_Link_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R274_Link_Inventory_Date_and_Time_Change_Information_Supported}">
                    <testStep functionId="Step 50.37.1 VERIFY that a last-update-time data frame exists within each instance of data frame linkInventoryMsg.link-inventory-item.link-inventory-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="last-update-time" instanceName="tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link" elementType="data-frame" functionId="Looking for linkInventoryMsg.link-inventory-item.link-inventory-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 50.38 IF TMDD_N110R282_Link_Name___Link_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R282_Link_Name___Link_Status_Supported}"></jl:if>
               <testStep functionId="Step 50.39 IF TMDD_N110R283_Link_Direction___Link_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R283_Link_Direction___Link_Status_Supported}"></jl:if>
               <testStep functionId="Step 50.40 IF TMDD_N110R285_Link_Priority_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R285_Link_Priority_Supported}"></jl:if>
               <testStep functionId="Step 50.41 IF TMDD_N110R286_Link_Restrictions___Axles_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R286_Link_Restrictions___Axles_Supported}"></jl:if>
               <testStep functionId="Step 50.42 IF TMDD_N110R287_Link_Restrictions___Height_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R287_Link_Restrictions___Height_Supported}"></jl:if>
               <testStep functionId="Step 50.43 IF TMDD_N110R288_Link_Restrictions___Length_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R288_Link_Restrictions___Length_Supported}"></jl:if>
               <testStep functionId="Step 50.44 IF TMDD_N110R289_Link_Restrictions___Weight_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R289_Link_Restrictions___Weight_Supported}"></jl:if>
               <testStep functionId="Step 50.45 IF TMDD_N110R290_Link_Restrictions___Width_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R290_Link_Restrictions___Width_Supported}"></jl:if>
               <testStep functionId="Step 50.46 IF TMDD_N110R291_Link_Restrictions___Axle_Weight_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R291_Link_Restrictions___Axle_Weight_Supported}"></jl:if>
               <testStep functionId="Step 50.47 IF TMDD_N110R293_Link_Surface_Conditions_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R293_Link_Surface_Conditions_Supported}"></jl:if>
               <testStep functionId="Step 50.48 IF TMDD_N110R294_Link_Saturation_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R294_Link_Saturation_Supported}"></jl:if>
               <testStep functionId="Step 50.49 IF TMDD_N110R295_Link_Saturation_Threshold_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R295_Link_Saturation_Threshold_Supported}"></jl:if>
               <testStep functionId="Step 50.50 VERIFY that the values within the RESPONSE message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="RESPONSE" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="RESPONSE" optionList="TMDD_N110R257_Restrictions___Link_Inventory_Supported,restrictions,tmdd:linkInventoryMsg.link-inventory-item;TMDD_N110R258_Roadway_Network_Name___Link_Inventory_Supported,network-name,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R259_Link_Name___Link_Inventory_Supported,link-name,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R260_Alternate_Names___Link_Inventory_Supported,alternate-link-name,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R261_Route_Designator___Link_Inventory_Supported,link-route-designator,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R262_Secondary_Route_Designator_Supported,secondary-link-route-designator,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R263_Linear_Reference___Link_Inventory_Supported,linear-reference,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R263_Linear_Reference___Link_Inventory_Supported,linear-reference-version,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R264_Link_Length_Supported,link-length,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R265_Link_Capacity_Supported,link-capacity,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R266_Link_Speed_Limit___Link_Inventory_Supported,link-speed-limit,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R267_Link_Truck_Speed_Limit___Link_Inventory_Supported,link-speed-limit-truck,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R268_Speed_Limit_Units___Link_Inventory_Supported,link-speed-limit-units,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R269_Link_Law_Enforcement_Jurisdiction_Supported,link-jurisdiction,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R270_Designated_Owner_Supported,link-owner,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R271_Left_Shoulder_Width_Supported,left-shoulder-width,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R272_Right_Shoulder_Width_Supported,right-shoulder-width,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R273_Median_Type_Supported,lane-separator,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R274_Link_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:linkInventoryMsg.link-inventory-item.link-inventory-list.link;TMDD_N110R14_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
          </jl:if>
          <testStep functionId="Step 51 IF ErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 51.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.6 VERIFY that data element error-code is set to ErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${ErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 51.7 IF TMDD_N110R14_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N110R14_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 51.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <testStep functionId=" Step 52 EXIT" passfailResult="False"/>
     </C2CRI-session>
</testprocedure>