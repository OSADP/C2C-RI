<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-15-dlTrafficNetworkInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.2.3 [Need to Share Route State] and is used for both valid and invalid test cases.
       Version/Date: 2013/09/23 18:16:13-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.2.3 [Need to Share Route State] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Restrictions - Route Status is required by the specification. (NRTM 3.3.4.4.2.5.2.1).  RECORD this information as: TMDD_N15R340_Restrictions___Route_Status_Supported = ${TMDD_N15R340_Restrictions___Route_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Route Name - Route Status is required by the specification. (NRTM 3.3.4.4.2.5.2.2).  RECORD this information as: TMDD_N15R341_Route_Name___Route_Status_Supported = ${TMDD_N15R341_Route_Name___Route_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Route Detour Status Flag is required by the specification. (NRTM 3.3.4.4.2.5.2.3).  RECORD this information as: TMDD_N15R342_Route_Detour_Status_Flag_Supported = ${TMDD_N15R342_Route_Detour_Status_Flag_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Event Description Time - Route Status is required by the specification. (NRTM 3.3.4.4.2.5.2.21).  RECORD this information as: TMDD_N15R360_Event_Description_Time___Route_Status_Supported = ${TMDD_N15R360_Event_Description_Time___Route_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Route Status Date and Time Change Information is required by the specification. (NRTM 3.3.4.4.2.5.2.22).  RECORD this information as: TMDD_N15R361_Route_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N15R361_Route_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 7 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 8 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 9 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 10 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 11 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 12 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 13 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 14 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 15 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 16 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlTrafficNetworkInformationSubscription SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlTrafficNetworkInformationSubscription" functionId="dlTrafficNetworkInformationSubscription" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 17 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 17.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 17.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlRouteStatusUpdate RESPONSETIMEREQUIRED=TMDD_N15R335_Publish_Route_Status_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlRouteStatusUpdate" functionId="dlRouteStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N15R335_Publish_Route_Status_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 17.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 17.1.2.1 VERIFY that element routeStatusMsg exists." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="routeStatusMsg" instanceName="tmdd:routeStatusMsg" elementType="message" functionId="Looking for routeStatusMsg"/>
                         </testStep>
                         <testStep functionId="Step 17.1.2.2 VERIFY that element organization-information exists within each instance of routeStatusMsg.route-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:routeStatusMsg.route-status-item" elementType="data-frame" functionId="Looking for routeStatusMsg.route-status-item"/>
                         </testStep>
                         <testStep functionId="Step 17.1.2.3 VERIFY that element network-id exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                         </testStep>
                         <testStep functionId="Step 17.1.2.4 VERIFY that element route-id exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="route-id" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                         </testStep>
                         <testStep functionId="Step 17.1.2.5 VERIFY that element route-status exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="route-status" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                         </testStep>
                         <testStep functionId="Step 17.1.2.6 IF TMDD_N15R340_Restrictions___Route_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N15R340_Restrictions___Route_Status_Supported}">
                              <testStep functionId="Step 17.1.2.6.1 VERIFY that element restrictions exists within each instance of routeStatusMsg.route-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:routeStatusMsg.route-status-item" elementType="data-frame" functionId="Looking for routeStatusMsg.route-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 17.1.2.7 IF TMDD_N15R341_Route_Name___Route_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N15R341_Route_Name___Route_Status_Supported}">
                              <testStep functionId="Step 17.1.2.7.1 VERIFY that element route-name exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-name" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 17.1.2.8 IF TMDD_N15R342_Route_Detour_Status_Flag_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N15R342_Route_Detour_Status_Flag_Supported}">
                              <testStep functionId="Step 17.1.2.8.1 VERIFY that element detour-route-in-effect-flag exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="detour-route-in-effect-flag" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 17.1.2.9 IF TMDD_N15R360_Event_Description_Time___Route_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N15R360_Event_Description_Time___Route_Status_Supported}">
                              <testStep functionId="Step 17.1.2.9.1 VERIFY that element event-description-time exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="event-description-time" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-element" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 17.1.2.10 IF TMDD_N15R361_Route_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N15R361_Route_Status_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 17.1.2.10.1 VERIFY that element last-update-time exists within each instance of routeStatusMsg.route-status-item.route-status-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-update-time" instanceName="tmdd:routeStatusMsg.route-status-item.route-status-list.route" elementType="data-frame" functionId="Looking for routeStatusMsg.route-status-item.route-status-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 17.1.2.11 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N15R340_Restrictions___Route_Status_Supported,restrictions,tmdd:routeStatusMsg.route-status-item;TMDD_N15R341_Route_Name___Route_Status_Supported,route-name,tmdd:routeStatusMsg.route-status-item.route-status-list.route;TMDD_N15R342_Route_Detour_Status_Flag_Supported,detour-route-in-effect-flag,tmdd:routeStatusMsg.route-status-item.route-status-list.route;TMDD_N15R360_Event_Description_Time___Route_Status_Supported,event-description-time,tmdd:routeStatusMsg.route-status-item.route-status-list.route;TMDD_N15R361_Route_Status_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:routeStatusMsg.route-status-item.route-status-list.route;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 17.1.2.12 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                              <jl:set var="OptionalContentVerified" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 17.1.2.13 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlRouteStatusUpdate RESPONSETIMEREQUIRED=TMDD_N15R335_Publish_Route_Status_Information_Parameter OPTIONALCONTENTVERIFIED = OptionalContentVerified PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlRouteStatusUpdate" functionId="dlRouteStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N15R335_Publish_Route_Status_Information_Parameter}" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>