<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-12-dlTrafficNetworkInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.1.3 [Need for Route Inventory] and is used for both valid and invalid test cases.
       Version/Date: 2013/09/23 18:14:49-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlTrafficNetworkInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.4.1.3 [Need for Route Inventory] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Restrictions - Route Inventory is required by the specification. (NRTM 3.3.4.4.1.5.2.1).  RECORD this information as: TMDD_N12R325_Restrictions___Route_Inventory_Supported = ${TMDD_N12R325_Restrictions___Route_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Roadway Network Name - Route Inventory is required by the specification. (NRTM 3.3.4.4.1.5.2.2).  RECORD this information as: TMDD_N12R326_Roadway_Network_Name___Route_Inventory_Supported = ${TMDD_N12R326_Roadway_Network_Name___Route_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Route Name - Route Inventory is required by the specification. (NRTM 3.3.4.4.1.5.2.3).  RECORD this information as: TMDD_N12R327_Route_Name___Route_Inventory_Supported = ${TMDD_N12R327_Route_Name___Route_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Alternate Route Names - Route Inventory is required by the specification. (NRTM 3.3.4.4.1.5.2.4).  RECORD this information as: TMDD_N12R328_Alternate_Route_Names___Route_Inventory_Supported = ${TMDD_N12R328_Alternate_Route_Names___Route_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Route Length is required by the specification. (NRTM 3.3.4.4.1.5.2.5).  RECORD this information as: TMDD_N12R329_Route_Length_Supported = ${TMDD_N12R329_Route_Length_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Node List is required by the specification. (NRTM 3.3.4.4.1.5.2.6).  RECORD this information as: TMDD_N12R330_Node_List_Supported = ${TMDD_N12R330_Node_List_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Route Image URL (RouteURL) is required by the specification. (NRTM 3.3.4.4.1.5.2.7).  RECORD this information as: TMDD_N12R331_Route_Image_URL__RouteURL__Supported = ${TMDD_N12R331_Route_Image_URL__RouteURL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Route Image URL Reference Medium is required by the specification. (NRTM 3.3.4.4.1.5.2.8).  RECORD this information as: TMDD_N12R332_Route_Image_URL_Reference_Medium_Supported = ${TMDD_N12R332_Route_Image_URL_Reference_Medium_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Route Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.4.4.1.5.2.9).  RECORD this information as: TMDD_N12R333_Route_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N12R333_Route_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 11 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 12 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 13 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 14 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 15 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 16 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 17 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 18 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 19 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 20 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlTrafficNetworkInformationSubscription SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlTrafficNetworkInformationSubscription" functionId="dlTrafficNetworkInformationSubscription" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 21 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 21.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 21.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlRouteInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N12R320_Publish_Route_Inventory_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlRouteInventoryUpdate" functionId="dlRouteInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N12R320_Publish_Route_Inventory_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 21.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 21.1.2.1 VERIFY that element routeInventoryMsg exists." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="routeInventoryMsg" instanceName="tmdd:routeInventoryMsg" elementType="message" functionId="Looking for routeInventoryMsg"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.2 VERIFY that element organization-information exists within each instance of routeInventoryMsg.route-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:routeInventoryMsg.route-inventory-item" elementType="data-frame" functionId="Looking for routeInventoryMsg.route-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.3 VERIFY that element network-id exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.4 VERIFY that element route-id exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="route-id" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.5 VERIFY that element route-link-id-list exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="route-link-id-list" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.6 VERIFY that element route-type exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="route-type" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                         </testStep>
                         <testStep functionId="Step 21.1.2.7 IF TMDD_N12R325_Restrictions___Route_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R325_Restrictions___Route_Inventory_Supported}">
                              <testStep functionId="Step 21.1.2.7.1 VERIFY that element restrictions exists within each instance of routeInventoryMsg.route-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:routeInventoryMsg.route-inventory-item" elementType="data-frame" functionId="Looking for routeInventoryMsg.route-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.8 IF TMDD_N12R326_Roadway_Network_Name___Route_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R326_Roadway_Network_Name___Route_Inventory_Supported}">
                              <testStep functionId="Step 21.1.2.8.1 VERIFY that element network-name exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="network-name" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.9 IF TMDD_N12R327_Route_Name___Route_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R327_Route_Name___Route_Inventory_Supported}">
                              <testStep functionId="Step 21.1.2.9.1 VERIFY that element route-name exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-name" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.10 IF TMDD_N12R328_Alternate_Route_Names___Route_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R328_Alternate_Route_Names___Route_Inventory_Supported}">
                              <testStep functionId="Step 21.1.2.10.1 VERIFY that element alternate-route-name-list exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="alternate-route-name-list" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.11 IF TMDD_N12R329_Route_Length_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R329_Route_Length_Supported}">
                              <testStep functionId="Step 21.1.2.11.1 VERIFY that element route-length exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-length" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.12 IF TMDD_N12R330_Node_List_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R330_Node_List_Supported}">
                              <testStep functionId="Step 21.1.2.12.1 VERIFY that element route-node-id-list exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-node-id-list" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.13 IF TMDD_N12R331_Route_Image_URL__RouteURL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R331_Route_Image_URL__RouteURL__Supported}">
                              <testStep functionId="Step 21.1.2.13.1 VERIFY that element route-url exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-url" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-frame" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.14 IF TMDD_N12R332_Route_Image_URL_Reference_Medium_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R332_Route_Image_URL_Reference_Medium_Supported}">
                              <testStep functionId="Step 21.1.2.14.1 VERIFY that element url-reference-medium exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route.route-url" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="url-reference-medium" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route.route-url" elementType="data-element" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route.route-url"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.15 IF TMDD_N12R333_Route_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N12R333_Route_Inventory_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 21.1.2.15.1 VERIFY that element last-update-time exists within each instance of routeInventoryMsg.route-inventory-item.route-inventory-list.route" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-update-time" instanceName="tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route" elementType="data-frame" functionId="Looking for routeInventoryMsg.route-inventory-item.route-inventory-list.route"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 21.1.2.16 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N12R325_Restrictions___Route_Inventory_Supported,restrictions,tmdd:routeInventoryMsg.route-inventory-item;TMDD_N12R326_Roadway_Network_Name___Route_Inventory_Supported,network-name,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R327_Route_Name___Route_Inventory_Supported,route-name,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R328_Alternate_Route_Names___Route_Inventory_Supported,alternate-route-name-list,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R329_Route_Length_Supported,route-length,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R330_Node_List_Supported,route-node-id-list,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R331_Route_Image_URL__RouteURL__Supported,route-url,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;TMDD_N12R332_Route_Image_URL_Reference_Medium_Supported,url-reference-medium,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route.route-url;TMDD_N12R333_Route_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:routeInventoryMsg.route-inventory-item.route-inventory-list.route;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 21.1.2.17 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                              <jl:set var="OptionalContentVerified" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 21.1.2.18 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlRouteInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N12R320_Publish_Route_Inventory_Information_Parameter OPTIONALCONTENTVERIFIED = OptionalContentVerified PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlRouteInventoryUpdate" functionId="dlRouteInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N12R320_Publish_Route_Inventory_Information_Parameter}" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>