<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-25-dlCCTVInventoryRequest-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.1 [Need to Share CCTV Device Inventory] and is used for both valid and invalid test cases.
       Version/Date: 2013/09/23 18:21:23-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlCCTVInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.1 [Need to Share CCTV Device Inventory] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Restrictions - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.1).  RECORD this information as: TMDD_N25R376_Restrictions___Device_Inventory_Supported = ${TMDD_N25R376_Restrictions___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Device Description is required by the specification. (NRTM 3.3.5.1.2.1.2.2).  RECORD this information as: TMDD_N25R377_Device_Description_Supported = ${TMDD_N25R377_Device_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Device Control Type is required by the specification. (NRTM 3.3.5.1.2.1.2.3).  RECORD this information as: TMDD_N25R378_Device_Control_Type_Supported = ${TMDD_N25R378_Device_Control_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Controller Description is required by the specification. (NRTM 3.3.5.1.2.1.2.4).  RECORD this information as: TMDD_N25R379_Controller_Description_Supported = ${TMDD_N25R379_Controller_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Roadway Network Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.5).  RECORD this information as: TMDD_N25R380_Roadway_Network_Identifier___Device_Inventory_Supported = ${TMDD_N25R380_Roadway_Network_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Node Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.6).  RECORD this information as: TMDD_N25R381_Node_Identifier___Device_Inventory_Supported = ${TMDD_N25R381_Node_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Node Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.7).  RECORD this information as: TMDD_N25R382_Node_Name___Device_Inventory_Supported = ${TMDD_N25R382_Node_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Link Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.8).  RECORD this information as: TMDD_N25R383_Link_Identifier___Device_Inventory_Supported = ${TMDD_N25R383_Link_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Link Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.9).  RECORD this information as: TMDD_N25R384_Link_Name___Device_Inventory_Supported = ${TMDD_N25R384_Link_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Link Direction - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.10).  RECORD this information as: TMDD_N25R385_Link_Direction___Device_Inventory_Supported = ${TMDD_N25R385_Link_Direction___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Linear Reference - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.11).  RECORD this information as: TMDD_N25R386_Linear_Reference___Device_Inventory_Supported = ${TMDD_N25R386_Linear_Reference___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Linear Reference Version is required by the specification. (NRTM 3.3.5.1.2.1.2.12).  RECORD this information as: TMDD_N25R387_Linear_Reference_Version_Supported = ${TMDD_N25R387_Linear_Reference_Version_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Route Designator - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.13).  RECORD this information as: TMDD_N25R388_Route_Designator___Device_Inventory_Supported = ${TMDD_N25R388_Route_Designator___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Device Uniform Resource Locator (URL) (DeviceURL) is required by the specification. (NRTM 3.3.5.1.2.1.2.14).  RECORD this information as: TMDD_N25R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported = ${TMDD_N25R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Device URL Reference Medium is required by the specification. (NRTM 3.3.5.1.2.1.2.15).  RECORD this information as: TMDD_N25R390_Device_URL_Reference_Medium_Supported = ${TMDD_N25R390_Device_URL_Reference_Medium_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Device Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.2.1.2.16).  RECORD this information as: TMDD_N25R391_Device_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N25R391_Device_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Text Insertion - CCTV Inventory is required by the specification. (NRTM 3.3.5.3.1.5.2.1).  RECORD this information as: TMDD_N25R514_Text_Insertion___CCTV_Inventory_Supported = ${TMDD_N25R514_Text_Insertion___CCTV_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Camera Type is required by the specification. (NRTM 3.3.5.3.1.5.2.2).  RECORD this information as: TMDD_N25R515_Camera_Type_Supported = ${TMDD_N25R515_Camera_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Camera Pan Left Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.3).  RECORD this information as: TMDD_N25R516_Camera_Pan_Left_Limit_Supported = ${TMDD_N25R516_Camera_Pan_Left_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether Camera Pan Right Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.4).  RECORD this information as: TMDD_N25R517_Camera_Pan_Right_Limit_Supported = ${TMDD_N25R517_Camera_Pan_Right_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Camera Tilt Up Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.5).  RECORD this information as: TMDD_N25R518_Camera_Tilt_Up_Limit_Supported = ${TMDD_N25R518_Camera_Tilt_Up_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Camera Tilt Down Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.6).  RECORD this information as: TMDD_N25R519_Camera_Tilt_Down_Limit_Supported = ${TMDD_N25R519_Camera_Tilt_Down_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Camera Zoom Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.7).  RECORD this information as: TMDD_N25R520_Camera_Zoom_Limit_Supported = ${TMDD_N25R520_Camera_Zoom_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Camera Focus Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.8).  RECORD this information as: TMDD_N25R521_Camera_Focus_Limit_Supported = ${TMDD_N25R521_Camera_Focus_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Camera Iris Limit is required by the specification. (NRTM 3.3.5.3.1.5.2.9).  RECORD this information as: TMDD_N25R522_Camera_Iris_Limit_Supported = ${TMDD_N25R522_Camera_Iris_Limit_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Camera Environmental Features is required by the specification. (NRTM 3.3.5.3.1.5.2.10).  RECORD this information as: TMDD_N25R523_Camera_Environmental_Features_Supported = ${TMDD_N25R523_Camera_Environmental_Features_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 28 CONFIGURE: Define the message that will be sent to the SUT.  RECORD this information as: RequestMessage:  ${RequestMessage}" passfailResult="False"/>
          <testStep functionId="Step 29 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 30 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 31 REQUEST-RESPONSE-EC with the following parameters:   DIALOG=dlCCTVInventoryRequest RESPONSETIMEREQUIRED=TMDD_N25R508_Send_CCTV_Inventory_Information_Upon_Request_Parameter REQUESTMESSAGE = RequestMessage ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected ">
               <REQUEST-RESPONSE-EC Dialog="dlCCTVInventoryRequest" functionId="dlCCTVInventoryRequest" RESPONSETIMEREQUIRED="${TMDD_N25R508_Send_CCTV_Inventory_Information_Upon_Request_Parameter}" REQUESTMESSAGE="${RequestMessage}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 32 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 32.1 VERIFY that element device-inventory-header exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-inventory-header" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
               </testStep>
               <testStep functionId="Step 32.2 VERIFY that element device-inventory-header exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-inventory-header" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
               </testStep>
               <testStep functionId="Step 32.3 VERIFY that element organization-information exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 32.4 VERIFY that element device-id exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-id" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 32.5 VERIFY that element device-location exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-location" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 32.6 VERIFY that element device-name exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-name" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 32.7 VERIFY that element cCTVInventoryMsg exists." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="cCTVInventoryMsg" instanceName="tmdd:cCTVInventoryMsg" elementType="message" functionId="Looking for cCTVInventoryMsg"/>
               </testStep>
               <testStep functionId="Step 32.8 VERIFY that element device-inventory-header exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-inventory-header" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
               </testStep>
               <testStep functionId="Step 32.9 VERIFY that element cctv-requests-supported-list exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="cctv-requests-supported-list" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
               </testStep>
               <testStep functionId="Step 32.10 VERIFY that element cctv-image-list exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="cctv-image-list" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
               </testStep>
               <testStep functionId="Step 32.11 IF TMDD_N25R376_Restrictions___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R376_Restrictions___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.11.1 VERIFY that element restrictions exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.12 IF TMDD_N25R377_Device_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R377_Device_Description_Supported}">
                    <testStep functionId="Step 32.12.1 VERIFY that element device-description exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-description" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.13 IF TMDD_N25R378_Device_Control_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R378_Device_Control_Type_Supported}">
                    <testStep functionId="Step 32.13.1 VERIFY that element device-control-type exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-control-type" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.14 IF TMDD_N25R379_Controller_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R379_Controller_Description_Supported}">
                    <testStep functionId="Step 32.14.1 VERIFY that element controller-description exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="controller-description" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.15 IF TMDD_N25R380_Roadway_Network_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R380_Roadway_Network_Identifier___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.15.1 VERIFY that element network-id exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="network-id" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.16 IF TMDD_N25R381_Node_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R381_Node_Identifier___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.16.1 VERIFY that element node-id exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="node-id" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.17 IF TMDD_N25R382_Node_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R382_Node_Name___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.17.1 VERIFY that element node-name exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="node-name" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.18 IF TMDD_N25R383_Link_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R383_Link_Identifier___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.18.1 VERIFY that element link-id exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.19 IF TMDD_N25R384_Link_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R384_Link_Name___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.19.1 VERIFY that element link-name exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-name" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.20 IF TMDD_N25R385_Link_Direction___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R385_Link_Direction___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.20.1 VERIFY that element link-direction exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-direction" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.21 IF TMDD_N25R386_Linear_Reference___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R386_Linear_Reference___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.21.1 VERIFY that element linear-reference exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="linear-reference" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.22 IF TMDD_N25R387_Linear_Reference_Version_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R387_Linear_Reference_Version_Supported}">
                    <testStep functionId="Step 32.22.1 VERIFY that element linear-reference-version exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="linear-reference-version" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.23 IF TMDD_N25R388_Route_Designator___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R388_Route_Designator___Device_Inventory_Supported}">
                    <testStep functionId="Step 32.23.1 VERIFY that element route-designator exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="route-designator" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.24 IF TMDD_N25R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}">
                    <testStep functionId="Step 32.24.1 VERIFY that element device-url exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-url" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.25 IF TMDD_N25R390_Device_URL_Reference_Medium_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R390_Device_URL_Reference_Medium_Supported}">
                    <testStep functionId="Step 32.25.1 VERIFY that element url-reference-medium exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header.device-url" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="url-reference-medium" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header.device-url" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header.device-url"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.26 IF TMDD_N25R391_Device_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R391_Device_Inventory_Date_and_Time_Change_Information_Supported}">
                    <testStep functionId="Step 32.26.1 VERIFY that element last-update-time exists within each instance of cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="last-update-time" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.27 IF TMDD_N25R514_Text_Insertion___CCTV_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R514_Text_Insertion___CCTV_Inventory_Supported}">
                    <testStep functionId="Step 32.27.1 VERIFY that element cctv-titling-text exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-titling-text" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.28 IF TMDD_N25R515_Camera_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R515_Camera_Type_Supported}">
                    <testStep functionId="Step 32.28.1 VERIFY that element cctv-camera-type exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-type" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.29 IF TMDD_N25R516_Camera_Pan_Left_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R516_Camera_Pan_Left_Limit_Supported}">
                    <testStep functionId="Step 32.29.1 VERIFY that element cctv-camera-pan-left-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-pan-left-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.30 IF TMDD_N25R517_Camera_Pan_Right_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R517_Camera_Pan_Right_Limit_Supported}">
                    <testStep functionId="Step 32.30.1 VERIFY that element cctv-camera-pan-right-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-pan-right-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.31 IF TMDD_N25R518_Camera_Tilt_Up_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R518_Camera_Tilt_Up_Limit_Supported}">
                    <testStep functionId="Step 32.31.1 VERIFY that element cctv-camera-tilt-up-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-tilt-up-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.32 IF TMDD_N25R519_Camera_Tilt_Down_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R519_Camera_Tilt_Down_Limit_Supported}">
                    <testStep functionId="Step 32.32.1 VERIFY that element cctv-camera-tilt-down-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-tilt-down-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.33 IF TMDD_N25R520_Camera_Zoom_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R520_Camera_Zoom_Limit_Supported}">
                    <testStep functionId="Step 32.33.1 VERIFY that element cctv-camera-zoom-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-zoom-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.34 IF TMDD_N25R521_Camera_Focus_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R521_Camera_Focus_Limit_Supported}">
                    <testStep functionId="Step 32.34.1 VERIFY that element cctv-camera-focus-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-focus-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.35 IF TMDD_N25R522_Camera_Iris_Limit_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R522_Camera_Iris_Limit_Supported}">
                    <testStep functionId="Step 32.35.1 VERIFY that element cctv-camera-iris-limit exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-iris-limit" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.36 IF TMDD_N25R523_Camera_Environmental_Features_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N25R523_Camera_Environmental_Features_Supported}">
                    <testStep functionId="Step 32.36.1 VERIFY that element cctv-camera-environmental exists within each instance of cCTVInventoryMsg.cctv-inventory-item" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="cctv-camera-environmental" instanceName="tmdd:cCTVInventoryMsg.cctv-inventory-item" elementType="data-element" functionId="Looking for cCTVInventoryMsg.cctv-inventory-item"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 32.37 VERIFY that the values within the RESPONSE message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="RESPONSE" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="RESPONSE" optionList="TMDD_N25R376_Restrictions___Device_Inventory_Supported,restrictions,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R377_Device_Description_Supported,device-description,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R378_Device_Control_Type_Supported,device-control-type,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R379_Controller_Description_Supported,controller-description,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R380_Roadway_Network_Identifier___Device_Inventory_Supported,network-id,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R381_Node_Identifier___Device_Inventory_Supported,node-id,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R382_Node_Name___Device_Inventory_Supported,node-name,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R383_Link_Identifier___Device_Inventory_Supported,link-id,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R384_Link_Name___Device_Inventory_Supported,link-name,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R385_Link_Direction___Device_Inventory_Supported,link-direction,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R386_Linear_Reference___Device_Inventory_Supported,linear-reference,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R387_Linear_Reference_Version_Supported,linear-reference-version,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R388_Route_Designator___Device_Inventory_Supported,route-designator,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R389_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported,device-url,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R390_Device_URL_Reference_Medium_Supported,url-reference-medium,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header.device-url;TMDD_N25R391_Device_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:cCTVInventoryMsg.cctv-inventory-item.device-inventory-header;TMDD_N25R514_Text_Insertion___CCTV_Inventory_Supported,cctv-titling-text,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R515_Camera_Type_Supported,cctv-camera-type,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R516_Camera_Pan_Left_Limit_Supported,cctv-camera-pan-left-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R517_Camera_Pan_Right_Limit_Supported,cctv-camera-pan-right-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R518_Camera_Tilt_Up_Limit_Supported,cctv-camera-tilt-up-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R519_Camera_Tilt_Down_Limit_Supported,cctv-camera-tilt-down-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R520_Camera_Zoom_Limit_Supported,cctv-camera-zoom-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R521_Camera_Focus_Limit_Supported,cctv-camera-focus-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R522_Camera_Iris_Limit_Supported,cctv-camera-iris-limit,tmdd:cCTVInventoryMsg.cctv-inventory-item;TMDD_N25R523_Camera_Environmental_Features_Supported,cctv-camera-environmental,tmdd:cCTVInventoryMsg.cctv-inventory-item;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
          </jl:if>
     </C2CRI-session>
</testprocedure>