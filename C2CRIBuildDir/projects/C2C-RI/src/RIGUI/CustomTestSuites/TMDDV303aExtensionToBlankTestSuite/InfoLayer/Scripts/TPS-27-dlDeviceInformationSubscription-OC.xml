<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-27-dlDeviceInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.3 [Need to Share CCTV Device Status] and is used for both valid and invalid test cases.
       Version/Date: 2013/09/23 18:22:39-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.2.3 [Need to Share CCTV Device Status] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine whether Restrictions - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.1).  RECORD this information as: TMDD_N27R394_Restrictions___Device_Status_Supported = ${TMDD_N27R394_Restrictions___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Unique Identifier of the Controlling Center is required by the specification. (NRTM 3.3.5.1.3.1.2.2).  RECORD this information as: TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported = ${TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Device Communications Status is required by the specification. (NRTM 3.3.5.1.3.1.2.3).  RECORD this information as: TMDD_N27R396_Device_Communications_Status_Supported = ${TMDD_N27R396_Device_Communications_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Operator Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.4).  RECORD this information as: TMDD_N27R397_Operator_Identifier___Device_Status_Supported = ${TMDD_N27R397_Operator_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Event Identifier - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.5).  RECORD this information as: TMDD_N27R398_Event_Identifier___Device_Status_Supported = ${TMDD_N27R398_Event_Identifier___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Event Response Plan - Device Status is required by the specification. (NRTM 3.3.5.1.3.1.2.6).  RECORD this information as: TMDD_N27R399_Event_Response_Plan___Device_Status_Supported = ${TMDD_N27R399_Event_Response_Plan___Device_Status_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Device Status Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.3.1.2.7).  RECORD this information as: TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported = ${TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether CCTV Error is required by the specification. (NRTM 3.3.5.3.2.5.2.1).  RECORD this information as: TMDD_N27R530_CCTV_Error_Supported = ${TMDD_N27R530_CCTV_Error_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether CCTV Format is required by the specification. (NRTM 3.3.5.3.2.5.2.2).  RECORD this information as: TMDD_N27R531_CCTV_Format_Supported = ${TMDD_N27R531_CCTV_Format_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether CCTV Preset Position is required by the specification. (NRTM 3.3.5.3.2.5.2.3).  RECORD this information as: TMDD_N27R532_CCTV_Preset_Position_Supported = ${TMDD_N27R532_CCTV_Preset_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether CCTV Pan Position is required by the specification. (NRTM 3.3.5.3.2.5.2.4).  RECORD this information as: TMDD_N27R533_CCTV_Pan_Position_Supported = ${TMDD_N27R533_CCTV_Pan_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether CCTV Tilt Position is required by the specification. (NRTM 3.3.5.3.2.5.2.5).  RECORD this information as: TMDD_N27R534_CCTV_Tilt_Position_Supported = ${TMDD_N27R534_CCTV_Tilt_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether CCTV Zoom Position is required by the specification. (NRTM 3.3.5.3.2.5.2.6).  RECORD this information as: TMDD_N27R535_CCTV_Zoom_Position_Supported = ${TMDD_N27R535_CCTV_Zoom_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether CCTV Iris Position is required by the specification. (NRTM 3.3.5.3.2.5.2.7).  RECORD this information as: TMDD_N27R536_CCTV_Iris_Position_Supported = ${TMDD_N27R536_CCTV_Iris_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether CCTV Focus Position is required by the specification. (NRTM 3.3.5.3.2.5.2.8).  RECORD this information as: TMDD_N27R537_CCTV_Focus_Position_Supported = ${TMDD_N27R537_CCTV_Focus_Position_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Camera Environmental Features Status is required by the specification. (NRTM 3.3.5.3.2.5.2.9).  RECORD this information as: TMDD_N27R538_Camera_Environmental_Features_Status_Supported = ${TMDD_N27R538_Camera_Environmental_Features_Status_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.03a" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 18 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 19 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 20 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 21 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 22 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 23 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 24 CONFIGURE: Define the publication message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 25 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 26 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 27 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 28 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 28.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 28.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlCCTVStatusUpdate RESPONSETIMEREQUIRED=TMDD_N27R525_Publish_CCTV_Status_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlCCTVStatusUpdate" functionId="dlCCTVStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N27R525_Publish_CCTV_Status_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 28.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 28.1.2.1 VERIFY that element device-status-header exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.2 VERIFY that element device-status-header exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.3 VERIFY that element organization-information exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.4 VERIFY that element device-id exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.5 VERIFY that element device-status exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.6 VERIFY that element cCTVStatusMsg exists." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="cCTVStatusMsg" instanceName="tmdd:cCTVStatusMsg" elementType="message" functionId="Looking for cCTVStatusMsg"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.7 VERIFY that element device-status-header exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-status-header" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                         </testStep>
                         <testStep functionId="Step 28.1.2.8 IF TMDD_N27R394_Restrictions___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R394_Restrictions___Device_Status_Supported}">
                              <testStep functionId="Step 28.1.2.8.1 VERIFY that element restrictions exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.9 IF TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported}">
                              <testStep functionId="Step 28.1.2.9.1 VERIFY that element center-id exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="center-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.10 IF TMDD_N27R396_Device_Communications_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R396_Device_Communications_Status_Supported}">
                              <testStep functionId="Step 28.1.2.10.1 VERIFY that element device-comm-status exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-comm-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.11 IF TMDD_N27R397_Operator_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R397_Operator_Identifier___Device_Status_Supported}">
                              <testStep functionId="Step 28.1.2.11.1 VERIFY that element operator-id exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="operator-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.12 IF TMDD_N27R398_Event_Identifier___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R398_Event_Identifier___Device_Status_Supported}">
                              <testStep functionId="Step 28.1.2.12.1 VERIFY that element event-id exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="event-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.13 IF TMDD_N27R399_Event_Response_Plan___Device_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R399_Event_Response_Plan___Device_Status_Supported}">
                              <testStep functionId="Step 28.1.2.13.1 VERIFY that element response-plan-id exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="response-plan-id" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.14 IF TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 28.1.2.14.1 VERIFY that element last-comm-time exists within each instance of cCTVStatusMsg.cctv-status-item.device-status-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-comm-time" instanceName="tmdd:cCTVStatusMsg.cctv-status-item.device-status-header" elementType="data-frame" functionId="Looking for cCTVStatusMsg.cctv-status-item.device-status-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.15 IF TMDD_N27R530_CCTV_Error_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R530_CCTV_Error_Supported}">
                              <testStep functionId="Step 28.1.2.15.1 VERIFY that element cctv-error exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-error" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.16 IF TMDD_N27R531_CCTV_Format_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R531_CCTV_Format_Supported}">
                              <testStep functionId="Step 28.1.2.16.1 VERIFY that element cctv-image-list exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-image-list" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.17 IF TMDD_N27R532_CCTV_Preset_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R532_CCTV_Preset_Position_Supported}">
                              <testStep functionId="Step 28.1.2.17.1 VERIFY that element cctv-position-preset exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-preset" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.18 IF TMDD_N27R533_CCTV_Pan_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R533_CCTV_Pan_Position_Supported}">
                              <testStep functionId="Step 28.1.2.18.1 VERIFY that element cctv-position-pan exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-pan" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.19 IF TMDD_N27R534_CCTV_Tilt_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R534_CCTV_Tilt_Position_Supported}">
                              <testStep functionId="Step 28.1.2.19.1 VERIFY that element cctv-position-tilt exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-tilt" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.20 IF TMDD_N27R535_CCTV_Zoom_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R535_CCTV_Zoom_Position_Supported}">
                              <testStep functionId="Step 28.1.2.20.1 VERIFY that element cctv-position-zoom-lens exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-zoom-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.21 IF TMDD_N27R536_CCTV_Iris_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R536_CCTV_Iris_Position_Supported}">
                              <testStep functionId="Step 28.1.2.21.1 VERIFY that element cctv-position-iris-lens exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-iris-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.22 IF TMDD_N27R537_CCTV_Focus_Position_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R537_CCTV_Focus_Position_Supported}">
                              <testStep functionId="Step 28.1.2.22.1 VERIFY that element cctv-position-focus-lens exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-position-focus-lens" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.23 IF TMDD_N27R538_Camera_Environmental_Features_Status_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N27R538_Camera_Environmental_Features_Status_Supported}">
                              <testStep functionId="Step 28.1.2.23.1 VERIFY that element cctv-environmental-status exists within each instance of cCTVStatusMsg.cctv-status-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="cctv-environmental-status" instanceName="tmdd:cCTVStatusMsg.cctv-status-item" elementType="data-element" functionId="Looking for cCTVStatusMsg.cctv-status-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 28.1.2.24 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N27R394_Restrictions___Device_Status_Supported,restrictions,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R395_Unique_Identifier_of_the_Controlling_Center_Supported,center-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R396_Device_Communications_Status_Supported,device-comm-status,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R397_Operator_Identifier___Device_Status_Supported,operator-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R398_Event_Identifier___Device_Status_Supported,event-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R399_Event_Response_Plan___Device_Status_Supported,response-plan-id,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R400_Device_Status_Date_and_Time_Change_Information_Supported,last-comm-time,tmdd:cCTVStatusMsg.cctv-status-item.device-status-header;TMDD_N27R530_CCTV_Error_Supported,cctv-error,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R531_CCTV_Format_Supported,cctv-image-list,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R532_CCTV_Preset_Position_Supported,cctv-position-preset,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R533_CCTV_Pan_Position_Supported,cctv-position-pan,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R534_CCTV_Tilt_Position_Supported,cctv-position-tilt,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R535_CCTV_Zoom_Position_Supported,cctv-position-zoom-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R536_CCTV_Iris_Position_Supported,cctv-position-iris-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R537_CCTV_Focus_Position_Supported,cctv-position-focus-lens,tmdd:cCTVStatusMsg.cctv-status-item;TMDD_N27R538_Camera_Environmental_Features_Status_Supported,cctv-environmental-status,tmdd:cCTVStatusMsg.cctv-status-item;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 28.1.2.25 CONFIGURE: Set OptionalContentVerified to True" passfailResult="False">
                              <jl:set var="OptionalContentVerified" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 28.1.2.26 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlCCTVStatusUpdate RESPONSETIMEREQUIRED=TMDD_N27R525_Publish_CCTV_Status_Information_Parameter OPTIONALCONTENTVERIFIED = OptionalContentVerified PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlCCTVStatusUpdate" functionId="dlCCTVStatusUpdate" RESPONSETIMEREQUIRED="${TMDD_N27R525_Publish_CCTV_Status_Information_Parameter}" OPTIONALCONTENTVERIFIED="${OptionalContentVerified}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
     </C2CRI-session>
</testprocedure>