<?xml version="1.0" ?> 
<!--   
       Title:  TPS-NTCIP2306-FTP-GET-OC
       Description:  This test procedure is called by a test case and is used to verify a SUTs conformance to the FTP encoding and 
                     transport subprofiles of NTCIP 2306 when acting as an OC. This procedure supports verification of requirements related to 
                     user needs 3 (FTP Profile) and is used for both valid and invalid test cases.
       Version/Date: 2013/11/28 12:44 (Manual)
-->

<testprocedure xmlns="jelly:jameleon"  xmlns:jl="jelly:core" >
<test-case-id>${C2CRITestCaseID}</test-case-id>
<test-case-summary>This test procedure is called by a test case and is used to verify a SUTs conformance to the FTP encoding and transport subprofiles of NTCIP 2306 when acting as an OC. 
This procedure supports verification of requirements related to user needs 3 (FTP Profile) and is used for both valid and invalid test cases.</test-case-summary>


<testStep functionId = "Step 1 CONFIGURE: Identify the WSDL file that will define the one-way Get operation used during the test.  RECORD the WSDL File Name value as: ${WSDLFile}"  passfailResult="False"/>
<testStep functionId = "Step 2 CONFIGURE: Identify the FTP related Service defined in the WSDL that will be used for the one-way Get operation during the test.  RECORD the Service name value as: ${ServiceName}"  passfailResult="False"/>
<testStep functionId = "Step 3 CONFIGURE: Identify the port related to the FTP Get service that will used during the test.  RECORD this value as: ${PortName} "  passfailResult="False"/>
<testStep functionId = "Step 4 CONFIGURE: Select a Get operation related to the FTP Service selected to be used for the test.  RECORD this value as: ${OperationName}"  passfailResult="False"/>
<testStep functionId = "Step 5 CONFIGURE: Determine whether an FTP transport error is expected during this test.  RECORD this value as: ${TransportErrorExpected}"  passfailResult="False"/>
<testStep functionId = "Step 6 CONFIGURE: IF TransPortErrorExpected =True THEN RECORD the expected FTP transport error code as: ${TransportErrorTypeExpected}" passfailResult="False"/>
<testStep functionId = "Step 7 CONFIGURE: Determine whether an encoding error is expected during this test.  RECORD this value as: ${EncodingErrorExpected}"  passfailResult="False"/>
<testStep functionId = "Step 8 CONFIGURE: RECORD the expected FTP encoding error code as: ${EncodingErrorTypeExpected}"  passfailResult="False"/>
<testStep functionId = "Step 9 CONFIGURE: Determine whether an XML message error is expected during this test.  RECORD this value as: ${MessageErrorExpected}"  passfailResult="False"/>
<testStep functionId = "Step 10 CONFIGURE: IF MessageErrorExpected =True THEN RECORD the expected type of message error as: ${MessageErrorTypeExpected}"  passfailResult="False"/>
<testStep functionId = "Step 11 PERFORM TPS_NTCIP2306_WSDL."  passfailResult="True">
		<ri-execute-script functionId="${C2CRITestCaseID}"
                                   script="TPS-NTCIP2306-WSDL.xml"
                                   checkOutcomePassed="true"/>
 								   
</testStep>

<testStep functionId = "Step 12 CONFIGURE: Prepare the SUT to provide the specified FTP service. "  passfailResult="False">
<NTCIP2306-session testCaseIdentifier="${C2CRITestCaseID}" riMode="EC" wsdlURL="${WSDLFile}">


<testStep functionId = "Step 13 FTP-GET-EC with the following parameter(s): SERVICENAME = ${ServiceName}, PORTNAME = ${PortName}, OPERATIONNAME = ${OperationName}  Returns: TRANSPORTERRORRESULT, TRANSPORTERRORTYPE, ENCODINGERRORRESULT, ENCODINGERRORTYPE, MESSAGEERRORRESULT, MESSAGEERRORTYPE"  passfailResult="False">
	<FTP-GET-EC functionId="FTP-GET-EC" SERVICENAME="${ServiceName}" PORTNAME="${PortName}" OPERATIONNAME="${OperationName}"/>
</testStep>

	<testStep functionId = "Step 14 VERIFY that TRANSPORTERRORRESULT = TransportErrorExpected" >
          <ju-assert-equals functionId="Verify the TRANSPORTERRORRESULT" msg="Error: TransportErrorExpected was ${TransportErrorExpected} while TRANSPORTERRORRESULT was ${TRANSPORTERRORRESULT}."  actual="${TRANSPORTERRORRESULT}" expected="${TransportErrorExpected}"/>
      </testStep>

	<testStep functionId = "Step 15 VERIFY that TRANSPORTERRORTYPE = TransportErrorTypeExpected" >
          <ju-assert-equals functionId="Verify the TRANSPORTERRORTYPE" msg="Error: TransportErrorTypeExpected was ${TransportErrorTypeExpected} while TRANSPORTERRORTYPE was ${TRANSPORTERRORTYPE}."  actual="${TRANSPORTERRORTYPE}" expected="${TransportErrorTypeExpected}"/>
      </testStep>
	  
	<testStep functionId = "Step 16 IF TRANSPORTERRORRESULT = False THEN CONTINUE; OTHERWISE skip the following sub steps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."  passfailResult="False"/>
	<jl:if test="${!TRANSPORTERRORRESULT}">

		<testStep functionId = "Step 16.1 VERIFY that ENCODINGERRORRESULT = EncodingErrorExpected" >
			<ju-assert-equals functionId="Verify the ENCODINGERRORRESULT" msg="Error: EncodingErrorExpected was ${EncodingErrorExpected} while ENCODINGERRORRESULT was ${ENCODINGERRORRESULT} with ENCODINGERRORTYPE = ${ENCODINGERRORTYPE}."  actual="${ENCODINGERRORRESULT}" expected="${EncodingErrorExpected}"/>
		</testStep>

		<testStep functionId = "Step 16.2 VERIFY that ENCODINGERRORTYPE = EncodingErrorTypeExpected" >
			<ju-assert-equals functionId="Verify the ENCODINGERRORTYPE" msg="Error: EncodingErrorTypeExpected was ${EncodingErrorTypeExpected} while ENCODINGERRORTYPE was ${ENCODINGERRORTYPE}."  actual="${ENCODINGERRORTYPE}" expected="${EncodingErrorTypeExpected}"/>
		</testStep>
	  
		<testStep functionId = "Step 16.3 IF ENCODINGERRORRESULT = False THEN CONTINUE; OTHERWISE skip the following sub steps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."  passfailResult="False"/>
		<jl:if test="${!ENCODINGERRORRESULT}">

			<testStep functionId = "Step 16.3.1 VERIFY that MESSAGEERRORRESULT = MessageErrorExpected" >
				<ju-assert-equals functionId="Verify the MESSAGEERRORRESULT" msg="Error: MessageErrorExpected was ${MessageErrorExpected} while MESSAGEERRORRESULT was ${MESSAGEERRORRESULT} with MESSAGEERRORTYPE = ${MESSAGEERRORTYPE}."  actual="${MESSAGEERRORRESULT}" expected="${MessageErrorExpected}"/>
			</testStep>

			<testStep functionId = "Step 16.3.2 VERIFY that MESSAGEERRORTYPE = MessageErrorTypeExpected" >
				<ju-assert-equals functionId="Verify the MESSAGEERRORTYPE" msg="Error: MessageErrorTypeExpected was ${MessageErrorTypeExpected} while MESSAGEERRORTYPE was ${MESSAGEERRORTYPE}."  actual="${MESSAGEERRORTYPE}" expected="${MessageErrorTypeExpected}"/>
			</testStep>	
		
	
		</jl:if>
	
	</jl:if>


</NTCIP2306-session>
</testStep>

<postcondition>
<testStep functionId=" Step 17 EXIT" passfailResult="False"/>
</postcondition>

</testprocedure>