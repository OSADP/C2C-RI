<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-61-dlDeviceInformationSubscription-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.7.1 [Need to Share HAR Inventory] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/18 00:25:53-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlDeviceInformationSubscription dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.7.1 [Need to Share HAR Inventory] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Publish HAR Inventory Information (NTRM 3.3.5.8.1.2}.  RECORD this value as: TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter = ${TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine the dialog performance requirement for Subscribe to HAR Inventory Information (NTRM 3.3.5.8.1.3}.  RECORD this value as: TMDD_N61R811_Subscribe_to_HAR_Inventory_Information_Parameter = ${TMDD_N61R811_Subscribe_to_HAR_Inventory_Information_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N61R15_Restrictions___Error_Report_Supported = ${TMDD_N61R15_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Restrictions - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.1).  RECORD this information as: TMDD_N61R380_Restrictions___Device_Inventory_Supported = ${TMDD_N61R380_Restrictions___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Device Description is required by the specification. (NRTM 3.3.5.1.2.1.2.2).  RECORD this information as: TMDD_N61R381_Device_Description_Supported = ${TMDD_N61R381_Device_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Device Control Type is required by the specification. (NRTM 3.3.5.1.2.1.2.3).  RECORD this information as: TMDD_N61R382_Device_Control_Type_Supported = ${TMDD_N61R382_Device_Control_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Controller Description is required by the specification. (NRTM 3.3.5.1.2.1.2.4).  RECORD this information as: TMDD_N61R383_Controller_Description_Supported = ${TMDD_N61R383_Controller_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Roadway Network Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.5).  RECORD this information as: TMDD_N61R384_Roadway_Network_Identifier___Device_Inventory_Supported = ${TMDD_N61R384_Roadway_Network_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Node Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.6).  RECORD this information as: TMDD_N61R385_Node_Identifier___Device_Inventory_Supported = ${TMDD_N61R385_Node_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Node Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.7).  RECORD this information as: TMDD_N61R386_Node_Name___Device_Inventory_Supported = ${TMDD_N61R386_Node_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Link Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.8).  RECORD this information as: TMDD_N61R387_Link_Identifier___Device_Inventory_Supported = ${TMDD_N61R387_Link_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Link Name - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.9).  RECORD this information as: TMDD_N61R388_Link_Name___Device_Inventory_Supported = ${TMDD_N61R388_Link_Name___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Link Direction - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.10).  RECORD this information as: TMDD_N61R389_Link_Direction___Device_Inventory_Supported = ${TMDD_N61R389_Link_Direction___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Linear Reference - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.11).  RECORD this information as: TMDD_N61R390_Linear_Reference___Device_Inventory_Supported = ${TMDD_N61R390_Linear_Reference___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Linear Reference Version is required by the specification. (NRTM 3.3.5.1.2.1.2.12).  RECORD this information as: TMDD_N61R391_Linear_Reference_Version_Supported = ${TMDD_N61R391_Linear_Reference_Version_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Route Designator - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.13).  RECORD this information as: TMDD_N61R392_Route_Designator___Device_Inventory_Supported = ${TMDD_N61R392_Route_Designator___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Device Uniform Resource Locator (URL) (DeviceURL) is required by the specification. (NRTM 3.3.5.1.2.1.2.14).  RECORD this information as: TMDD_N61R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported = ${TMDD_N61R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Device URL Reference Medium is required by the specification. (NRTM 3.3.5.1.2.1.2.15).  RECORD this information as: TMDD_N61R394_Device_URL_Reference_Medium_Supported = ${TMDD_N61R394_Device_URL_Reference_Medium_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Device Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.2.1.2.16).  RECORD this information as: TMDD_N61R395_Device_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N61R395_Device_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether HAR Characteristics is required by the specification. (NRTM 3.3.5.8.1.5.2.1).  RECORD this information as: TMDD_N61R815_HAR_Characteristics_Supported = ${TMDD_N61R815_HAR_Characteristics_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Transmission Frequency Description is required by the specification. (NRTM 3.3.5.8.1.5.2.2).  RECORD this information as: TMDD_N61R816_Transmission_Frequency_Description_Supported = ${TMDD_N61R816_Transmission_Frequency_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Call Sign is required by the specification. (NRTM 3.3.5.8.1.5.2.3).  RECORD this information as: TMDD_N61R817_Call_Sign_Supported = ${TMDD_N61R817_Call_Sign_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Additional Device Uniform Resource Locator (URL) is required by the specification. (NRTM 3.3.5.1.2.1.2.17).  RECORD this information as: TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported = ${TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Beacon Availability is required by the specification. (NRTM 3.3.5.8.1.5.2.4).  RECORD this information as: TMDD_N61R818_Beacon_Availability_Supported = ${TMDD_N61R818_Beacon_Availability_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Beacon Location is required by the specification. (NRTM 3.3.5.8.1.5.2.5).  RECORD this information as: TMDD_N61R819_Beacon_Location_Supported = ${TMDD_N61R819_Beacon_Location_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Beacon Description is required by the specification. (NRTM 3.3.5.8.1.5.2.6).  RECORD this information as: TMDD_N61R820_Beacon_Description_Supported = ${TMDD_N61R820_Beacon_Description_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.1" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 28 CONFIGURE: Determine the number of publication message transmissions that will be received within this test.  RECORD this information as: PublicationsToReceive:  ${PublicationsToReceive}" passfailResult="False"/>
          <testStep functionId="Step 29 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: PublicationErrorResponseExpected:  ${PublicationErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${PublicationErrorResponseExpected}">
               <testStep functionId="Step 30 CONFIGURE: IF PublicationErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  PublicationErrorTypeExpected:  ${PublicationErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 31 CONFIGURE: Define the publication response message that will be sent to the SUT.  RECORD this information as: PublicationResponseMessage:  ${PublicationResponseMessage}" passfailResult="False"/>
          <testStep functionId="Step 32 CONFIGURE: Determine whether the Authentication parameters need to be verified within this test.  RECORD this information as: AuthenticationCheck:  ${AuthenticationCheck}" passfailResult="False"/>
          <testStep functionId="Step 33 CONFIGURE: Determine whether the SUT will be allowed access to the information requested in this test.  RECORD this information as: AllowAccess:  ${AllowAccess}" passfailResult="False"/>
          <testStep functionId="Step 34 CONFIGURE: Define the subscription message that will be sent to the SUT.  RECORD this information as: SubscriptionMessage:  ${SubscriptionMessage}" passfailResult="False"/>
          <testStep functionId="Step 35 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: SubscriptionErrorResponseExpected:  ${SubscriptionErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 36 CONFIGURE: IF SubscriptionErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  SubscriptionErrorTypeExpected:  ${SubscriptionErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 37 SUBSCRIPTION-EC with the following parameters:   DIALOG=dlDeviceInformationSubscription RESPONSETIMEREQUIRED= SUBSCRIPTIONMESSAGE = SubscriptionMessage SUBSCRIPTIONERRORRESPONSEEXPECTED = SubscriptionErrorResponseExpected SUBSCRIPTIONERRORTYPEEXPECTED = SubscriptionErrorTypeExpected  Returns: CONTINUEPUBLICATION ">
               <SUBSCRIPTION-EC Dialog="dlDeviceInformationSubscription" functionId="dlDeviceInformationSubscription" RESPONSETIMEREQUIRED="60000" SUBSCRIPTIONMESSAGE="${SubscriptionMessage}" SUBSCRIPTIONERRORRESPONSEEXPECTED="${SubscriptionErrorResponseExpected}" SUBSCRIPTIONERRORTYPEEXPECTED="${SubscriptionErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 38 IF SubscriptionErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 38.1 WHILE CONTINUEPUBLICATION is equal to TRUE then CONTINUE, OTHERWISE skip the following substeps.  Note:If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step."/>
               <jl:while test="${CONTINUEPUBLICATION}">
                    <testStep functionId="Step 38.1.1 PUBLICATION-EC-RECEIVE with the following parameters:   DIALOG=dlHARInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter PUBLICATIONSTORECEIVE = PublicationsToReceive PUBLICATIONERRORRESPONSEEXPECTED = PublicationErrorResponseExpected PUBLICATIONERRORTYPEEXPECTED = PublicationErrorTypeExpected AUTHENTICATIONCHECK = AuthenticationCheck ALLOWACCESS = AllowAccess  Returns: CONTINUEPUBLICATION ">
                         <PUBLICATION-EC-RECEIVE Dialog="dlHARInventoryUpdate" functionId="dlHARInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter}" PUBLICATIONSTORECEIVE="${PublicationsToReceive}" PUBLICATIONERRORRESPONSEEXPECTED="${PublicationErrorResponseExpected}" PUBLICATIONERRORTYPEEXPECTED="${PublicationErrorTypeExpected}" AUTHENTICATIONCHECK="${AuthenticationCheck}" ALLOWACCESS="${AllowAccess}"/>
                    </testStep>
                    <testStep functionId="Step 38.1.2 IF PublicationErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
                    <jl:if test="${!PublicationErrorResponseExpected}">
                         <testStep functionId="Step 38.1.2.1 VERIFY that a device-inventory-header data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-inventory-header" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.2 VERIFY that an organization-information data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="organization-information" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.3 VERIFY that a device-id data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-id" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.4 VERIFY that a device-location data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-location" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.5 VERIFY that a device-name data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-name" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.6 VERIFY that a hARInventoryMsg message was received." passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="hARInventoryMsg" instanceName="tmdd:hARInventoryMsg" elementType="message" functionId="Looking for hARInventoryMsg"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.7 VERIFY that a device-inventory-header data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-inventory-header" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.8 VERIFY that a device-beacon data element exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                              <ri-MessageVerify msgType="REQUEST" elementName="device-beacon" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                         </testStep>
                         <testStep functionId="Step 38.1.2.9 IF TMDD_N61R380_Restrictions___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R380_Restrictions___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.9.1 VERIFY that a restrictions data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="restrictions" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.10 IF TMDD_N61R381_Device_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R381_Device_Description_Supported}">
                              <testStep functionId="Step 38.1.2.10.1 VERIFY that a device-description data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-description" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.11 IF TMDD_N61R382_Device_Control_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R382_Device_Control_Type_Supported}">
                              <testStep functionId="Step 38.1.2.11.1 VERIFY that a device-control-type data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-control-type" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.12 IF TMDD_N61R383_Controller_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R383_Controller_Description_Supported}">
                              <testStep functionId="Step 38.1.2.12.1 VERIFY that a controller-description data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="controller-description" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.13 IF TMDD_N61R384_Roadway_Network_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R384_Roadway_Network_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.13.1 VERIFY that a network-id data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="network-id" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.14 IF TMDD_N61R385_Node_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R385_Node_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.14.1 VERIFY that a node-id data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="node-id" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.15 IF TMDD_N61R386_Node_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R386_Node_Name___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.15.1 VERIFY that a node-name data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="node-name" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.16 IF TMDD_N61R387_Link_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R387_Link_Identifier___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.16.1 VERIFY that a link-id data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-id" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.17 IF TMDD_N61R388_Link_Name___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R388_Link_Name___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.17.1 VERIFY that a link-name data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-name" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.18 IF TMDD_N61R389_Link_Direction___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R389_Link_Direction___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.18.1 VERIFY that a link-direction data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="link-direction" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.19 IF TMDD_N61R390_Linear_Reference___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R390_Linear_Reference___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.19.1 VERIFY that a linear-reference data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="linear-reference" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.20 IF TMDD_N61R391_Linear_Reference_Version_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R391_Linear_Reference_Version_Supported}">
                              <testStep functionId="Step 38.1.2.20.1 VERIFY that a linear-reference-version data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="linear-reference-version" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.21 IF TMDD_N61R392_Route_Designator___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R392_Route_Designator___Device_Inventory_Supported}">
                              <testStep functionId="Step 38.1.2.21.1 VERIFY that a route-designator data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="route-designator" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.22 IF TMDD_N61R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}">
                              <testStep functionId="Step 38.1.2.22.1 VERIFY that a device-url data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-url" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.23 IF TMDD_N61R394_Device_URL_Reference_Medium_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R394_Device_URL_Reference_Medium_Supported}">
                              <testStep functionId="Step 38.1.2.23.1 VERIFY that an url-reference-medium data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header.device-url" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="url-reference-medium" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.device-url" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header.device-url"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.24 IF TMDD_N61R395_Device_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R395_Device_Inventory_Date_and_Time_Change_Information_Supported}">
                              <testStep functionId="Step 38.1.2.24.1 VERIFY that a last-update-time data frame exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="last-update-time" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for hARInventoryMsg.har-inventory-item.device-inventory-header"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.25 IF TMDD_N61R815_HAR_Characteristics_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R815_HAR_Characteristics_Supported}">
                              <testStep functionId="Step 38.1.2.25.1 VERIFY that a har-characteristics data element exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-characteristics" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.26 IF TMDD_N61R816_Transmission_Frequency_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R816_Transmission_Frequency_Description_Supported}">
                              <testStep functionId="Step 38.1.2.26.1 VERIFY that a har-frequency-description data element exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-frequency-description" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.27 IF TMDD_N61R817_Call_Sign_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R817_Call_Sign_Supported}">
                              <testStep functionId="Step 38.1.2.27.1 VERIFY that a har-call-sign data element exists within each instance of data frame hARInventoryMsg.har-inventory-item" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-call-sign" instanceName="tmdd:hARInventoryMsg.har-inventory-item" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.28 IF TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported}">
                              <testStep functionId="Step 38.1.2.28.1 VERIFY that a device-url2, device-url3 or device-url4 data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.device-inventory-header.tmddX:deviceInventoryHeaderExt" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="device-url2,device-url3,device-url4" instanceName="tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.tmddX:deviceInventoryHeaderExt" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.29 IF TMDD_N61R818_Beacon_Availability_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R818_Beacon_Availability_Supported}">
                              <testStep functionId="Step 38.1.2.29.1 VERIFY that a har-beacon2, har-beacon3, har-beacon4, har-beacon5, har-beacon6, har-beacon7 or har-beacon8 data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-beacon2,har-beacon3,har-beacon4,har-beacon5,har-beacon6,har-beacon7,har-beacon8" instanceName="tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.30 IF TMDD_N61R819_Beacon_Location_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R819_Beacon_Location_Supported}">
                              <testStep functionId="Step 38.1.2.30.1 VERIFY that a har-beacon1-location, har-beacon2-location, har-beacon3-location, har-beacon4-location, har-beacon5-location, har-beacon6-location, har-beacon7-location or har-beacon8-location data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-beacon1-location,har-beacon2-location,har-beacon3-location,har-beacon4-location,har-beacon5-location,har-beacon6-location,har-beacon7-location,har-beacon8-location" instanceName="tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.31 IF TMDD_N61R820_Beacon_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
                         <jl:if test="${TMDD_N61R820_Beacon_Description_Supported}">
                              <testStep functionId="Step 38.1.2.31.1 VERIFY that a har-beacon1-description, har-beacon2-description, har-beacon3-description, har-beacon4-description, har-beacon5-description, har-beacon6-description, har-beacon7-description or har-beacon8-description data element exists within each instance of data frame hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" passfailResult="True">
                                   <ri-MessageVerify msgType="REQUEST" elementName="har-beacon1-description,har-beacon2-description,har-beacon3-description,har-beacon4-description,har-beacon5-description,har-beacon6-description,har-beacon7-description,har-beacon8-description" instanceName="tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt" elementType="data-element" functionId="Looking for hARInventoryMsg.har-inventory-item"/>
                              </testStep>
                         </jl:if>
                         <testStep functionId="Step 38.1.2.32 VERIFY that the values within the REQUEST message are correct per the TMDD standard and known operational conditions.">
                              <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="REQUEST" verificationSpec="${VerificationSpec}"/>
                              <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="REQUEST" optionList="TMDD_N61R380_Restrictions___Device_Inventory_Supported,restrictions,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R381_Device_Description_Supported,device-description,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R382_Device_Control_Type_Supported,device-control-type,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R383_Controller_Description_Supported,controller-description,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R384_Roadway_Network_Identifier___Device_Inventory_Supported,network-id,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R385_Node_Identifier___Device_Inventory_Supported,node-id,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R386_Node_Name___Device_Inventory_Supported,node-name,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R387_Link_Identifier___Device_Inventory_Supported,link-id,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R388_Link_Name___Device_Inventory_Supported,link-name,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R389_Link_Direction___Device_Inventory_Supported,link-direction,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R390_Linear_Reference___Device_Inventory_Supported,linear-reference,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R391_Linear_Reference_Version_Supported,linear-reference-version,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R392_Route_Designator___Device_Inventory_Supported,route-designator,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported,device-url,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R394_Device_URL_Reference_Medium_Supported,url-reference-medium,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.device-url;TMDD_N61R395_Device_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header;TMDD_N61R815_HAR_Characteristics_Supported,har-characteristics,tmdd:hARInventoryMsg.har-inventory-item;TMDD_N61R816_Transmission_Frequency_Description_Supported,har-frequency-description,tmdd:hARInventoryMsg.har-inventory-item;TMDD_N61R817_Call_Sign_Supported,har-call-sign,tmdd:hARInventoryMsg.har-inventory-item;TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported,device-url2,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.tmddX:deviceInventoryHeaderExt;TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported,device-url3,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.tmddX:deviceInventoryHeaderExt;TMDD_N61R396_Additional_Device_Uniform_Resource_Locator__URL__Supported,device-url4,tmdd:hARInventoryMsg.har-inventory-item.device-inventory-header.tmddX:deviceInventoryHeaderExt;TMDD_N61R818_Beacon_Availability_Supported,har-beacon2,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon3,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon4,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon5,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon6,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon7,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R818_Beacon_Availability_Supported,har-beacon8,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt.har-beacon2;TMDD_N61R819_Beacon_Location_Supported,har-beacon1-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon2-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon3-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon4-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon5-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon6-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon7-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R819_Beacon_Location_Supported,har-beacon8-location,hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon1-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon2-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon3-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon4-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon5-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon6-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon7-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R820_Beacon_Description_Supported,har-beacon8-description,tmdd:hARInventoryMsg.har-inventory-item.tmddX:hARInventoryExt;TMDD_N61R15_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
                         </testStep>
                         <testStep functionId=" Step 38.1.2.33 CONFIGURE: Set CONTENTVERIFIED to True" passfailResult="False">
                              <jl:set var="CONTENTVERIFIED" value="true"/>
                         </testStep>
                         <postcondition>
                              <testStep functionId="Step 38.1.2.34 POSTCONDITION: PUBLICATION-EC-REPLY with the following parameters:   DIALOG=dlHARInventoryUpdate RESPONSETIMEREQUIRED=TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter CONTENTVERIFIED = CONTENTVERIFIED PUBLICATIONRESPONSEMESSAGE = PublicationResponseMessage ">
                                   <PUBLICATION-EC-REPLY Dialog="dlHARInventoryUpdate" functionId="dlHARInventoryUpdate" RESPONSETIMEREQUIRED="${TMDD_N61R810_Publish_HAR_Inventory_Information_Parameter}" CONTENTVERIFIED="${CONTENTVERIFIED}" PUBLICATIONRESPONSEMESSAGE="${PublicationResponseMessage}"/>
                              </testStep>
                         </postcondition>
                    </jl:if>
               </jl:while>
          </jl:if>
          <testStep functionId="Step 39 IF SubscriptionErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${SubscriptionErrorResponseExpected}">
               <testStep functionId="Step 39.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.6 VERIFY that data element error-code is set to SubscriptionErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${SubscriptionErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 39.7 IF TMDD_N61R15_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N61R15_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 39.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 40 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>
