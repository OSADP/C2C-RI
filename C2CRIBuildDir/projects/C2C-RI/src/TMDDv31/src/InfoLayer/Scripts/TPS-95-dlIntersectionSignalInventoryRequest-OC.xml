<?xml version="1.0" encoding="UTF-8"?>
<!--Title:  TPS-95-dlIntersectionSignalInventoryRequest-OC
       Description:  This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.10 [Need to Share Turning Movement and Intersection Data] and is used for both valid and invalid test cases.
       Version/Date: 2014/01/18 00:50:53-->
<testprocedure xmlns="jelly:jameleon" xmlns:jl="jelly:core">
     <test-case-id>${C2CRITestCaseID}</test-case-id>
     <test-case-summary>This test procedure is called by a test case and is used to verify the SUTs support of the dlIntersectionSignalInventoryRequest dialog as an OC using variables provided by the calling test case.  
This procedure supports verification of requirements related to user need 2.3.5.10.10 [Need to Share Turning Movement and Intersection Data] and is used for both valid and invalid test cases.</test-case-summary>
     <testStep functionId="Step 1 CONFIGURE: Determine the Application Layer Standard that will be used for this test.  RECORD this information as: ApplicationLayerStandard:  ${ApplicationLayerStandard}" passfailResult="False "/>
     <testStep functionId="Step 2 CONFIGURE: Determine the dialog performance requirement for Send Signal Inventory Information Upon Request (NTRM 3.3.5.11.1.1}.  RECORD this value as: TMDD_N95R967_Send_Signal_Inventory_Information_Upon_Request_Parameter = ${TMDD_N95R967_Send_Signal_Inventory_Information_Upon_Request_Parameter}" passfailResult="False"/>
     <testStep functionId="Step 3 CONFIGURE: Determine whether Restrictions - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.1).  RECORD this information as: TMDD_N95R380_Restrictions___Device_Inventory_Supported = ${TMDD_N95R380_Restrictions___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 4 CONFIGURE: Determine whether Device Description is required by the specification. (NRTM 3.3.5.1.2.1.2.2).  RECORD this information as: TMDD_N95R381_Device_Description_Supported = ${TMDD_N95R381_Device_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 5 CONFIGURE: Determine whether Device Control Type is required by the specification. (NRTM 3.3.5.1.2.1.2.3).  RECORD this information as: TMDD_N95R382_Device_Control_Type_Supported = ${TMDD_N95R382_Device_Control_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 6 CONFIGURE: Determine whether Roadway Network Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.5).  RECORD this information as: TMDD_N95R384_Roadway_Network_Identifier___Device_Inventory_Supported = ${TMDD_N95R384_Roadway_Network_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 7 CONFIGURE: Determine whether Link Identifier - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.8).  RECORD this information as: TMDD_N95R387_Link_Identifier___Device_Inventory_Supported = ${TMDD_N95R387_Link_Identifier___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 8 CONFIGURE: Determine whether Linear Reference - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.11).  RECORD this information as: TMDD_N95R390_Linear_Reference___Device_Inventory_Supported = ${TMDD_N95R390_Linear_Reference___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 9 CONFIGURE: Determine whether Route Designator - Device Inventory is required by the specification. (NRTM 3.3.5.1.2.1.2.13).  RECORD this information as: TMDD_N95R392_Route_Designator___Device_Inventory_Supported = ${TMDD_N95R392_Route_Designator___Device_Inventory_Supported}" passfailResult="False"/>
     <testStep functionId="Step 10 CONFIGURE: Determine whether Device Uniform Resource Locator (URL) (DeviceURL) is required by the specification. (NRTM 3.3.5.1.2.1.2.14).  RECORD this information as: TMDD_N95R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported = ${TMDD_N95R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}" passfailResult="False"/>
     <testStep functionId="Step 11 CONFIGURE: Determine whether Device URL Reference Medium is required by the specification. (NRTM 3.3.5.1.2.1.2.15).  RECORD this information as: TMDD_N95R394_Device_URL_Reference_Medium_Supported = ${TMDD_N95R394_Device_URL_Reference_Medium_Supported}" passfailResult="False"/>
     <testStep functionId="Step 12 CONFIGURE: Determine whether Device Inventory Date and Time Change Information is required by the specification. (NRTM 3.3.5.1.2.1.2.16).  RECORD this information as: TMDD_N95R395_Device_Inventory_Date_and_Time_Change_Information_Supported = ${TMDD_N95R395_Device_Inventory_Date_and_Time_Change_Information_Supported}" passfailResult="False"/>
     <testStep functionId="Step 13 CONFIGURE: Determine whether Link Identifiers is required by the specification. (NRTM 3.3.5.11.1.5.2.2).  RECORD this information as: TMDD_N95R974_Link_Identifiers_Supported = ${TMDD_N95R974_Link_Identifiers_Supported}" passfailResult="False"/>
     <testStep functionId="Step 14 CONFIGURE: Determine whether Direction of Traffic is required by the specification. (NRTM 3.3.5.11.1.5.2.3).  RECORD this information as: TMDD_N95R975_Direction_of_Traffic_Supported = ${TMDD_N95R975_Direction_of_Traffic_Supported}" passfailResult="False"/>
     <testStep functionId="Step 15 CONFIGURE: Determine whether Movement Identifier (MovementIdentifier) is required by the specification. (NRTM 3.3.5.11.1.5.2.4).  RECORD this information as: TMDD_N95R976_Movement_Identifier__MovementIdentifier__Supported = ${TMDD_N95R976_Movement_Identifier__MovementIdentifier__Supported}" passfailResult="False"/>
     <testStep functionId="Step 16 CONFIGURE: Determine whether Vehicle Movement Approach Link is required by the specification. (NRTM 3.3.5.11.1.5.2.5).  RECORD this information as: TMDD_N95R977_Vehicle_Movement_Approach_Link_Supported = ${TMDD_N95R977_Vehicle_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 17 CONFIGURE: Determine whether Pedestrian Movement Approach Link is required by the specification. (NRTM 3.3.5.11.1.5.2.6).  RECORD this information as: TMDD_N95R978_Pedestrian_Movement_Approach_Link_Supported = ${TMDD_N95R978_Pedestrian_Movement_Approach_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 18 CONFIGURE: Determine whether Departing Link is required by the specification. (NRTM 3.3.5.11.1.5.2.7).  RECORD this information as: TMDD_N95R979_Departing_Link_Supported = ${TMDD_N95R979_Departing_Link_Supported}" passfailResult="False"/>
     <testStep functionId="Step 19 CONFIGURE: Determine whether Crossing Point is required by the specification. (NRTM 3.3.5.11.1.5.2.8).  RECORD this information as: TMDD_N95R980_Crossing_Point_Supported = ${TMDD_N95R980_Crossing_Point_Supported}" passfailResult="False"/>
     <testStep functionId="Step 20 CONFIGURE: Determine whether Turning Movement Approach Vector is required by the specification. (NRTM 3.3.5.11.1.5.2.9).  RECORD this information as: TMDD_N95R981_Turning_Movement_Approach_Vector_Supported = ${TMDD_N95R981_Turning_Movement_Approach_Vector_Supported}" passfailResult="False"/>
     <testStep functionId="Step 21 CONFIGURE: Determine whether Turning Movement Type is required by the specification. (NRTM 3.3.5.11.1.5.2.10).  RECORD this information as: TMDD_N95R982_Turning_Movement_Type_Supported = ${TMDD_N95R982_Turning_Movement_Type_Supported}" passfailResult="False"/>
     <testStep functionId="Step 22 CONFIGURE: Determine whether Turning Movement Lanes is required by the specification. (NRTM 3.3.5.11.1.5.2.11).  RECORD this information as: TMDD_N95R983_Turning_Movement_Lanes_Supported = ${TMDD_N95R983_Turning_Movement_Lanes_Supported}" passfailResult="False"/>
     <testStep functionId="Step 23 CONFIGURE: Determine whether Turning Movement Description is required by the specification. (NRTM 3.3.5.11.1.5.2.12).  RECORD this information as: TMDD_N95R984_Turning_Movement_Description_Supported = ${TMDD_N95R984_Turning_Movement_Description_Supported}" passfailResult="False"/>
     <testStep functionId="Step 24 CONFIGURE: Determine whether Phase Identifier (PhaseIdentifier) is required by the specification. (NRTM 3.3.5.11.1.5.2.13).  RECORD this information as: TMDD_N95R985_Phase_Identifier__PhaseIdentifier__Supported = ${TMDD_N95R985_Phase_Identifier__PhaseIdentifier__Supported}" passfailResult="False"/>
     <testStep functionId="Step 25 CONFIGURE: Determine whether Coordinated Phase is required by the specification. (NRTM 3.3.5.11.1.5.2.14).  RECORD this information as: TMDD_N95R986_Coordinated_Phase_Supported = ${TMDD_N95R986_Coordinated_Phase_Supported}" passfailResult="False"/>
     <testStep functionId="Step 26 CONFIGURE: Determine whether Concurrent Phases is required by the specification. (NRTM 3.3.5.11.1.5.2.15).  RECORD this information as: TMDD_N95R987_Concurrent_Phases_Supported = ${TMDD_N95R987_Concurrent_Phases_Supported}" passfailResult="False"/>
     <testStep functionId="Step 27 CONFIGURE: Determine whether Overlap Phase is required by the specification. (NRTM 3.3.5.11.1.5.2.17).  RECORD this information as: TMDD_N95R989_Overlap_Phase_Supported = ${TMDD_N95R989_Overlap_Phase_Supported}" passfailResult="False"/>
     <testStep functionId="Step 28 CONFIGURE: Determine whether Overlap Included Phases is required by the specification. (NRTM 3.3.5.11.1.5.2.18).  RECORD this information as: TMDD_N95R990_Overlap_Included_Phases_Supported = ${TMDD_N95R990_Overlap_Included_Phases_Supported}" passfailResult="False"/>
     <testStep functionId="Step 29 CONFIGURE: Determine whether Restrictions - Error Report is required by the specification. (NRTM 3.3.1.4.1.2.1).  RECORD this information as: TMDD_N95R15_Restrictions___Error_Report_Supported = ${TMDD_N95R15_Restrictions___Error_Report_Supported}" passfailResult="False"/>
     <C2CRI-session beginSession="true" infoStd="TMDDv3.1" appStd="${ApplicationLayerStandard}" useWSDL="true" testCaseIdentifier="${C2CRITestCaseID}" riMode="EC">
          <testStep functionId="Step 30 CONFIGURE: Define the message that will be sent to the SUT.  RECORD this information as: RequestMessage:  ${RequestMessage}" passfailResult="False"/>
          <testStep functionId="Step 31 CONFIGURE: Determine whether an error response message is expected for this test.  RECORD this information as: ErrorResponseExpected:  ${ErrorResponseExpected}" passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 32 CONFIGURE: IF ErrorResponseExpected is true, determine the expected error code response for this test.  RECORD this information as:  ErrorTypeExpected:  ${ErrorTypeExpected}" passfailResult="False"/>
          </jl:if>
          <testStep functionId="Step 33 REQUEST-RESPONSE-EC with the following parameters:   DIALOG=dlIntersectionSignalInventoryRequest RESPONSETIMEREQUIRED=TMDD_N95R967_Send_Signal_Inventory_Information_Upon_Request_Parameter REQUESTMESSAGE = RequestMessage ERRORRESPONSEEXPECTED = ErrorResponseExpected ERRORTYPEEXPECTED = ErrorTypeExpected ">
               <REQUEST-RESPONSE-EC Dialog="dlIntersectionSignalInventoryRequest" functionId="dlIntersectionSignalInventoryRequest" RESPONSETIMEREQUIRED="${TMDD_N95R967_Send_Signal_Inventory_Information_Upon_Request_Parameter}" REQUESTMESSAGE="${RequestMessage}" ERRORRESPONSEEXPECTED="${ErrorResponseExpected}" ERRORTYPEEXPECTED="${ErrorTypeExpected}"/>
          </testStep>
          <testStep functionId="Step 34 IF ErrorResponseExpected is not equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  Note: If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${!ErrorResponseExpected}">
               <testStep functionId="Step 34.1 VERIFY that a device-inventory-header data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-inventory-header" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
               </testStep>
               <testStep functionId="Step 34.2 VERIFY that an organization-information data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 34.3 VERIFY that a device-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 34.4 VERIFY that a device-location data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-location" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 34.5 VERIFY that a device-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
               </testStep>
               <testStep functionId="Step 34.6 VERIFY that an intersectionSignalInventoryMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="intersectionSignalInventoryMsg" instanceName="tmdd:intersectionSignalInventoryMsg" elementType="message" functionId="Looking for intersectionSignalInventoryMsg"/>
               </testStep>
               <testStep functionId="Step 34.7 VERIFY that a device-inventory-header data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="device-inventory-header" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
               </testStep>
               <testStep functionId="Step 34.8 VERIFY that an intersection-name data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item" passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="intersection-name" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item"/>
               </testStep>
               <testStep functionId="Step 34.9 IF TMDD_N95R380_Restrictions___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R380_Restrictions___Device_Inventory_Supported}">
                    <testStep functionId="Step 34.9.1 VERIFY that a restrictions data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.10 IF TMDD_N95R381_Device_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R381_Device_Description_Supported}">
                    <testStep functionId="Step 34.10.1 VERIFY that a device-description data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-description" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.11 IF TMDD_N95R382_Device_Control_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R382_Device_Control_Type_Supported}">
                    <testStep functionId="Step 34.11.1 VERIFY that a device-control-type data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-control-type" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.12 IF TMDD_N95R384_Roadway_Network_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R384_Roadway_Network_Identifier___Device_Inventory_Supported}">
                    <testStep functionId="Step 34.12.1 VERIFY that a network-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="network-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.13 IF TMDD_N95R387_Link_Identifier___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R387_Link_Identifier___Device_Inventory_Supported}">
                    <testStep functionId="Step 34.13.1 VERIFY that a link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.14 IF TMDD_N95R390_Linear_Reference___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R390_Linear_Reference___Device_Inventory_Supported}">
                    <testStep functionId="Step 34.14.1 VERIFY that a linear-reference data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="linear-reference" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.15 IF TMDD_N95R392_Route_Designator___Device_Inventory_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R392_Route_Designator___Device_Inventory_Supported}">
                    <testStep functionId="Step 34.15.1 VERIFY that a route-designator data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="route-designator" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.16 IF TMDD_N95R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported}">
                    <testStep functionId="Step 34.16.1 VERIFY that a device-url data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="device-url" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.17 IF TMDD_N95R394_Device_URL_Reference_Medium_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R394_Device_URL_Reference_Medium_Supported}">
                    <testStep functionId="Step 34.17.1 VERIFY that an url-reference-medium data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="url-reference-medium" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.18 IF TMDD_N95R395_Device_Inventory_Date_and_Time_Change_Information_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R395_Device_Inventory_Date_and_Time_Change_Information_Supported}">
                    <testStep functionId="Step 34.18.1 VERIFY that a last-update-time data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="last-update-time" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.19 IF TMDD_N95R974_Link_Identifiers_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R974_Link_Identifiers_Supported}">
                    <testStep functionId="Step 34.19.1 VERIFY that a link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.20 IF TMDD_N95R975_Direction_of_Traffic_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R975_Direction_of_Traffic_Supported}">
                    <testStep functionId="Step 34.20.1 VERIFY that a link-direction data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="link-direction" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.21 IF TMDD_N95R976_Movement_Identifier__MovementIdentifier__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R976_Movement_Identifier__MovementIdentifier__Supported}">
                    <testStep functionId="Step 34.21.1 VERIFY that a movement-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="movement-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.22 IF TMDD_N95R977_Vehicle_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R977_Vehicle_Movement_Approach_Link_Supported}">
                    <testStep functionId="Step 34.22.1 VERIFY that an approach-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.23 IF TMDD_N95R978_Pedestrian_Movement_Approach_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R978_Pedestrian_Movement_Approach_Link_Supported}">
                    <testStep functionId="Step 34.23.1 VERIFY that an approach-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="approach-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.24 IF TMDD_N95R979_Departing_Link_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R979_Departing_Link_Supported}">
                    <testStep functionId="Step 34.24.1 VERIFY that a departing-link-id data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="departing-link-id" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.25 IF TMDD_N95R980_Crossing_Point_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R980_Crossing_Point_Supported}">
                    <testStep functionId="Step 34.25.1 VERIFY that a crossing-point data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="crossing-point" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-frame" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.26 IF TMDD_N95R981_Turning_Movement_Approach_Vector_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R981_Turning_Movement_Approach_Vector_Supported}">
                    <testStep functionId="Step 34.26.1 VERIFY that an approach-vector data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="approach-vector" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.27 IF TMDD_N95R982_Turning_Movement_Type_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R982_Turning_Movement_Type_Supported}">
                    <testStep functionId="Step 34.27.1 VERIFY that a turning-movement-code data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-code" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.28 IF TMDD_N95R983_Turning_Movement_Lanes_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R983_Turning_Movement_Lanes_Supported}">
                    <testStep functionId="Step 34.28.1 VERIFY that a turning-movement-lanes data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-lanes" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.29 IF TMDD_N95R984_Turning_Movement_Description_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R984_Turning_Movement_Description_Supported}">
                    <testStep functionId="Step 34.29.1 VERIFY that a turning-movement-text data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="turning-movement-text" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.30 IF TMDD_N95R985_Phase_Identifier__PhaseIdentifier__Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R985_Phase_Identifier__PhaseIdentifier__Supported}">
                    <testStep functionId="Step 34.30.1 VERIFY that a phase-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="phase-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.31 IF TMDD_N95R986_Coordinated_Phase_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R986_Coordinated_Phase_Supported}">
                    <testStep functionId="Step 34.31.1 VERIFY that a coordinated-phase data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="coordinated-phase" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.32 IF TMDD_N95R987_Concurrent_Phases_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R987_Concurrent_Phases_Supported}">
                    <testStep functionId="Step 34.32.1 VERIFY that a concurrent-phases-list data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="concurrent-phases-list" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.33 IF TMDD_N95R989_Overlap_Phase_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R989_Overlap_Phase_Supported}">
                    <testStep functionId="Step 34.33.1 VERIFY that an overlap-identifier data element exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="overlap-identifier" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.34 IF TMDD_N95R990_Overlap_Included_Phases_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R990_Overlap_Included_Phases_Supported}">
                    <testStep functionId="Step 34.34.1 VERIFY that an overlap-included-phases data frame exists within each instance of data frame intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="overlap-included-phases" instanceName="tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases" elementType="data-element" functionId="Looking for intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases"/>
                    </testStep>
               </jl:if>
               <testStep functionId="Step 34.35 VERIFY that the values within the RESPONSE message are correct per the TMDD standard and known operational conditions.">
                    <AUTO-VERIFY-MESSAGE functionId="Automatically Verify message content" msgName="RESPONSE" verificationSpec="${VerificationSpec}"/>
                    <USER-VERIFY-MESSAGE functionId="The User Verifies the message content" msgName="RESPONSE" optionList="TMDD_N95R380_Restrictions___Device_Inventory_Supported,restrictions,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R381_Device_Description_Supported,device-description,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R382_Device_Control_Type_Supported,device-control-type,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R384_Roadway_Network_Identifier___Device_Inventory_Supported,network-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R387_Link_Identifier___Device_Inventory_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R390_Linear_Reference___Device_Inventory_Supported,linear-reference,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R392_Route_Designator___Device_Inventory_Supported,route-designator,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R393_Device_Uniform_Resource_Locator__URL___DeviceURL__Supported,device-url,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R394_Device_URL_Reference_Medium_Supported,url-reference-medium,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header.device-url;TMDD_N95R395_Device_Inventory_Date_and_Time_Change_Information_Supported,last-update-time,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.device-inventory-header;TMDD_N95R960_Link_Identifiers_Supported,link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link;TMDD_N95R961_Direction_of_Traffic_Supported,link-direction,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.intersection-link-list.link;TMDD_N95R956_Movement_Identifier__MovementIdentifier__Supported,movement-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R960_Vehicle_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R961_Pedestrian_Movement_Approach_Link_Supported,approach-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R956_Departing_Link_Supported,departing-link-id,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R960_Crossing_Point_Supported,crossing-point,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R961_Turning_Movement_Approach_Vector_Supported,approach-vector,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R956_Turning_Movement_Type_Supported,turning-movement-code,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R960_Turning_Movement_Lanes_Supported,turning-movement-lanes,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R961_Turning_Movement_Description_Supported,turning-movement-text,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.movement-list.intersection-movements;TMDD_N95R985_Phase_Identifier__PhaseIdentifier__Supported,phase-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N95R960_Coordinated_Phase_Supported,coordinated-phase,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N95R961_Concurrent_Phases_Supported,concurrent-phases-list,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.phase-list.phases;TMDD_N95R989_Overlap_Phase_Supported,overlap-identifier,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;TMDD_N95R990_Overlap_Included_Phases_Supported,overlap-included-phases,tmdd:intersectionSignalInventoryMsg.intersection-signal-inventory-item.overlap-phase-list.overlap-phases;TMDD_N95R15_Restrictions___Error_Report_Supported,restrictions,tmdd:errorReportMsg;" userDataFile="${RI_USERTCDATAFILE}"/>
               </testStep>
          </jl:if>
          <testStep functionId="Step 35 IF ErrorResponseExpected is equal to TRUE THEN CONTINUE, OTHERWISE skip the following substeps.  If a verification step fails, then test execution will proceed at the next subsequent Post Condition step, if present.  Otherwise, test execution will proceed to the final Exit step." passfailResult="False"/>
          <jl:if test="${ErrorResponseExpected}">
               <testStep functionId="Step 35.1 VERIFY that an errorReportMsg message was received." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="errorReportMsg" instanceName="tmdd:errorReportMsg" elementType="message" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.2 VERIFY that an organization-information data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-information" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.3 VERIFY that an organization-requesting data frame exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="organization-requesting" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.4 VERIFY that an error-code data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.5 VERIFY that an error-text data element exists within message errorReportMsg." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-text" instanceName="tmdd:errorReportMsg" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.6 VERIFY that data element error-code is set to ErrorResponseTypeExpected." passfailResult="True">
                    <ri-MessageVerify msgType="RESPONSE" elementName="error-code" instanceName="tmdd:errorReportMsg" instanceValue="${ErrorResponseTypeExpected}" elementType="data-element" functionId="Looking for errorReportMsg"/>
               </testStep>
               <testStep functionId="Step 35.7 IF TMDD_N95R15_Restrictions___Error_Report_Supported is equal to TRUE THEN CONTINUE; OTHERWISE skip the following substeps." passFailResult="False"/>
               <jl:if test="${TMDD_N95R15_Restrictions___Error_Report_Supported}">
                    <testStep functionId="Step 35.7.1 VERIFY that a restrictions data frame exists within message errorReportMsg." passfailResult="True">
                         <ri-MessageVerify msgType="RESPONSE" elementName="restrictions" instanceName="tmdd:errorReportMsg" elementType="data-frame" functionId="Looking for errorReportMsg"/>
                    </testStep>
               </jl:if>
          </jl:if>
          <postcondition>
               <testStep functionId=" Step 36 EXIT" passfailResult="False"/>
          </postcondition>
     </C2CRI-session>
</testprocedure>